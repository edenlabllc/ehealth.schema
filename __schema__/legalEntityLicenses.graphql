"""
A condition to be used against `LegalEntityLicense` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LegalEntityLicenseFilter {
  "Checks for matching with the object’s `licenseNumber` field."
  licenseNumber: String
  "Checks for equality with the object’s `isActive` field."
  isActive: Boolean
}

"""
Methods to use when ordering `LegalEntityLicense`.
"""
enum LegalEntityLicenseOrderBy {
  "Orders by the object’s `activeFrom` field in the ascending order."
  ACTIVE_FROM_DATE_ASC
  "Orders by the object’s `activeFrom` field in the descending order."
  ACTIVE_FROM_DATE_DESC
  "Orders by the object’s `expiryDate` field in the ascending order."
  EXPIRY_DATE_ASC
  "Orders by the object’s `expiryDate` field in the descending order."
  EXPIRY_DATE_DESC
  "Orders by the object’s `insertedAt` field in the ascending order."
  INSERTED_AT_ASC
  "Orders by the object’s `insertedAt` field in the descending order."
  INSERTED_AT_DESC
  "Orders by the object’s `issuedDate` field in the ascending order."
  ISSUED_DATE_ASC
  "Orders by the object’s `issuedDate` field in the descending order."
  ISSUED_DATE_DESC
}

"""
A connection to a list of `LegalEntityLicense` values.
"""
type LegalEntityLicenseConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [LegalEntityLicense]
  "A list of edges."
  edges: [LegalEntityLicenseEdge]
}

"""
Reads and enables pagination through a set of `LegalEntityLicense`.
"""
type LegalEntityLicenseEdge {
  "The item at the end of the edge."
  node: LegalEntityLicense!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Legal entity license to practice medicine.
"""
type LegalEntityLicense implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "License number."
  licenseNumber: String @fake(randexp: "^[0-9]{12}$")
  "LicenseType. The value should be present in the `LICENSE_TYPE` dictionary."
  licenseType: String
  "Institution name where license was obtained."
  issuedBy: String @fake(locale: "uk", method: "company.companyName")
  "The date when the license was obtained."
  issuedDate: Date
  "Status of issuer."
  issuerStatus: String
  "The date when the license expires."
  expiryDate: Date @fake(locale: "uk", method: "date.future", args: [2])
  "The date of transferring this license to archive"
  activeFromDate: Date
  "License type, what is it granted for."
  whatLicensed: String
  "License order number"
  orderNo: String @fake(randexp: "^[0-9]{8}$")
  "Flag that shows if license is active."
  isActive: Boolean!
  "Date and time when record was inserted."
  insertedAt: DateTime!
  "Date and time when record was updated."
  updatedAt: DateTime!
}
