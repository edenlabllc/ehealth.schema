# import Address from "addresses.graphql"
# import Phone from "phones.graphql"
# import DivisionFilter, DivisionOrderBy, DivisionConnection from "divisions.graphql"
# import Employee from "employees.graphql"
# import RelatedLegalEntityFilter, RelatedLegalEntityOrderBy, RelatedLegalEntityConnection from "relatedLegalEntities.graphql"

"""
Fields to filter LegalEntity in the system.
"""
input LegalEntityFilter {
  "In case legal entity was verified by NHS employee, nhsVerified should be true."
  nhsVerified: Boolean
  "In case legal entity was reviewed by NHS employee, nhsReview should be true."
  nhsReviewed: Boolean
  "Area from legal entity address."
  area: String
  "settlement from legal entity address."
  settlement: String
  "The ID of an object"
  id: ID
  "A unique identification number of a legal entity in the State Register of Enterprises and Organizations of Ukraine."
  edrpou: String
}

"""
Methods to use when ordering `LegalEntity`.
"""
enum LegalEntityOrderBy {
  "Sort legal entity by edrpou in ascending order."
  EDRPOU_ASC
  "Sort legal entity by edrpou in descending order."
  EDRPOU_DESC
  "Sort legal entity by inserted at in ascending order."
  INSERTED_AT_ASC
  "Sort legal entity by inserted at in descending order."
  INSERTED_AT_DESC
  "Sort legal entity by nhs review at in ascending order."
  NHS_REVIEWED_ASC
  "Sort legal entity by nhs review at in descending order."
  NHS_REVIEWED_DESC
  "Sort legal entity by nhs verified at in ascending order."
  NHS_VERIFIED_ASC
  "Sort legal entity by nhs verified at in descending order."
  NHS_VERIFIED_DESC
  "Sort legal entity by status at in ascending order."
  STATUS_ASC
  "Sort legal entity by status at in descending order."
  STATUS_DESC
}

"""
A connection to a list of `LegalEntity` values.
"""
type LegalEntityConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [LegalEntity]
  "A list of edges."
  edges: [LegalEntityEdge]
}

"""
Reads and enables pagination through a set of `LegalEntity`.
"""
type LegalEntityEdge {
  "The item at the end of the edge."
  node: LegalEntity!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Inputs to verify legal entity by NHS employee.
"""
input NhsVerifyLegalEntityInput {
  "Legal entity database unique identifier."
  id: ID!
}

"""
Payload that should be sent to verify legal entity.
In order to verify legal entity user must have a scope `legal_entity:nhs_verify`.
"""
type NhsVerifyLegalEntityPayload {
  "Payload for legal entity."
  legalEntity: LegalEntity
}

"""
Inputs to deactivate legal entity by NHS employee.
"""
input DeactivateLegalEntityInput {
  "Legal entity database unique identifier."
  id: ID!
}

"""
Payload that should be sent to deactivate legal entity.
In order to deactivate legal entity user must have a scope `legal_entity:deactivate`.
"""
type DeactivateLegalEntityPayload {
  "Payload for legalEntity."
  legalEntity: LegalEntity
}

"""
Inputs to review legal entity by NHS employee.
"""
input NhsReviewLegalEntityInput {
  "Legal entity database unique identifier."
  id: ID!
  "Whether `LegalEntity` was reviewed or not?"
  nhsReviewed: Boolean!
}

"""
Payload that should be sent to review legal entity.
In order to review legal entity user must have a scope `legal_entity:nhs_verify`.
"""
type NhsReviewLegalEntityPayload {
  "Payload for legal entity."
  legalEntity: LegalEntity
}

"""
Inputs to comment for legal entity by NHS employee.
"""
input NhsCommentLegalEntityInput {
  "Legal entity database unique identifier."
  id: ID!
  "Comment for MSP to change legal entity"
  nhsComment: String!
}

"""
Payload that should be sent to comment legal entity.
In order to comment for legal entity user must have a scope `legal_entity:nhs_verify`.
"""
type NhsCommentLegalEntityPayload {
  "Payload for legal entity."
  legalEntity: LegalEntity
}

"""
Legal Entity contains data about medical service providers, pharamcies and MISes.
In order to obtain details user must have a scope `legal_entity:read`.

NHS admin can verify Legal Entity having a scope `legal_entity:nhs_verify`.
Also it's possible to deactivate Legal Entity having a scope `legal_entity:deactivate`
"""
type LegalEntity implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: ID!
  "full official name of legal entity also the name to show on public sources [as map, portal etc]"
  name: String!
  "Legal entity short name."
  shortName: String
  "Legal entity public name."
  publicName: String
  "Legal entity type."
  type: LegalEntityType!
  "Unified Register of Businesses and Organizations"
  edrpou: String!
  "Legal entity status, is set automatically"
  status: LegalEntityStatus!
  "Legal entity address."
  addresses: [Address]!
  "Legal entity phone number."
  phones: [Phone]!
  "email to contact person in charge from legal entity"
  email: String!
  "Ukrainian Industry Classification System, there is a check that at least one of next kveds is input: 86.10, 86.21, 47.73."
  kveds: [String]!
  "Business form."
  legalForm: String
  "Treasury registration code."
  receiverFundsCode: String
  "Dictionary OWNER_PROPERTY_TYPE State or private type of legal entity"
  ownerPropertyType: String!
  "Licenses and accreditation of legal entity."
  medicalServiceProvider: MedicalServiceProvider!
  "In case legal entity is verified by MIS, misVerified = true"
  misVerified: LegalEntityMisVerificationStatus!
  "Change requests for this `LegalEntity` in order to verify it."
  nhsComment: String
  "Whether this `LegalEntity` was reviewed or not?"
  nhsReviewed: Boolean
  "In case legal entity is verified by NHS, nhsVerified = true"
  nhsVerified: Boolean
  "legal entity website"
  website: String
  "legal owner of legal entity [нформація про власника ЗОЗ, для ФОП не заповнюється]"
  beneficiary: String
  "Legal entity archive information, date and place"
  archives: [LegalEntityArchive]
  "System information: date and time when legal entity was inserted to DB."
  insertedAt: DateTime! @fake(locale: "uk", method: "date.past")
  "First employee with employee_type='OWNER ordered by UPDATED_AT_DESC"
  owner: Employee!

  "Employees wich belong to legal entity"
  employees(
    "A condition to be used in determining which values should be returned by the collection."
    filter: EmployeeFilter
    "The method to use when ordering collection items."
    orderBy: EmployeeOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): EmployeeConnection!
  "Divisions within this legal entity."
  divisions(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DivisionFilter
    "The method to use when ordering collection items."
    orderBy: DivisionOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DivisionConnection!
  "Main/Active legal entity after merging legal entities."
  mergedToLegalEntity: RelatedLegalEntity
  "Legal entities that are not active anymore and that were merged to this one."
  mergedFromLegalEntities(
    "A condition to be used in determining which values should be returned by the collection."
    filter: RelatedLegalEntityFilter
    "The method to use when ordering collection items."
    orderBy: RelatedLegalEntityOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): RelatedLegalEntityConnection!
}

"""
Denotes the type of legal entity.
"""
enum LegalEntityType {
  "Is a medical information system."
  MIS
  "Is a medical service provider."
  MSP
  "Is a pharmacy."
  PHARMACY
}

"""
List of legal entities statuses.
"""
enum LegalEntityStatus {
  "Denotes that legal entity is active."
  ACTIVE
  "Denotes that legal entity is closed. This state is irreversible."
  CLOSED
}

"""
List of Mis Verification status.
"""
enum LegalEntityMisVerificationStatus {
  "Status for not verified legal entity by MIS"
  NOT_VERIFIED
  "Status for verified legal entity by MIS"
  VERIFIED
}

"""
Inforamtion about licenses and accreditations of legal entity.
"""
type MedicalServiceProvider {
  "legal entity medical licenses."
  licenses: [LegalEntityLicense]
  "legal entity accreditation information."
  accreditation: LegalEntityAccreditation
}

"""
Legal entity license to practice medicine.
"""
type LegalEntityLicense {
  "License number."
  licenseNumber: String
  "Institution name where license was obtained."
  issuedBy: String
  "The date when the license was obtained."
  issuedDate: Date @fake(locale: "uk", method: "date.past", args: [100])
  "The date when the license expires."
  expiryDate: Date @fake(locale: "uk", method: "date.past", args: [100])
  "The date of transferring this license to archive"
  activeFromDate: Date @fake(locale: "uk", method: "date.past", args: [100])
  "License type, what is it granted for."
  whatLicensed: String
  "License order number"
  orderNo: String
}

"""
Legal entity accreditation information.
"""
type LegalEntityAccreditation {
  "Accreditation category."
  category: String
  "The issue date of accreditation."
  issuedDate: Date @fake(locale: "uk", method: "date.past", args: [100])
  "The expiration date of accreditation."
  expiryDate: Date @fake(locale: "uk", method: "date.past", args: [100])
  "Accreditation order number."
  orderNo: String
  "Accreditation order date."
  orderDate: Date @fake(locale: "uk", method: "date.past", args: [100])
}

"""
Inforamtion of transferring paper documents of legal entities to archive.
"""
type LegalEntityArchive {
  "the date when paper documents were transferred to archive"
  date: Date @fake(locale: "uk", method: "date.past", args: [100])
  "the address of building where paper documents are"
  place: String
}
