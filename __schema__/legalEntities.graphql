# import Address from "addresses.graphql"
# import Phone from "phones.graphql"
# import DivisionFilter, DivisionOrderBy, DivisionConnection from "divisions.graphql"
# import Employee from "employees.graphql"
# import RelatedLegalEntityFilter, RelatedLegalEntityOrderBy, RelatedLegalEntityConnection from "relatedLegalEntities.graphql"

type Query {
  "the filter must be used to get exactly one legal entity knowing its' ID"
  legalEntity(id: ID!): LegalEntity

  "the filter must be used to get exactly one legal entity knowing its' EDRPOU"
  legalEntityByEdrpou(edrpou: String!): LegalEntity

  "the filter must be used to get list of legal entities"
  legalEntities(
    filter: LegalEntityFilter
    orderBy: LegalEntityOrderBy
    after: String
    before: String
    first: Int
    last: Int
  ): LegalEntityConnection!
}

input LegalEntityFilter {
  nhsVerified: Boolean
  area: String
  settlement: String
  id: ID
  edrpou: String
}

enum LegalEntityOrderBy {
  EDRPOU_ASC
  EDRPOU_DESC
  INSERTED_AT_ASC
  INSERTED_AT_DESC
  NHS_VERIFIED_ASC
  NHS_VERIFIED_DESC
  STATUS_ASC
  STATUS_DESC
}

type LegalEntityConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [LegalEntity]
  "A list of edges."
  edges: [LegalEntityEdge]
}

type LegalEntityEdge {
  "The item at the end of the edge."
  node: LegalEntity!
  "A cursor for use in pagination."
  cursor: String!
}

type Mutation {
  nhsVerifyLegalEntity(input: NhsVerifyLegalEntityInput!): NhsVerifyLegalEntityPayload
  
  deactivateLegalEntity(input: DeactivateLegalEntityInput!): DeactivateLegalEntityPayload
}

input NhsVerifyLegalEntityInput {
  id: ID!
}

type NhsVerifyLegalEntityPayload {
  legalEntity: LegalEntity
}

input DeactivateLegalEntityInput {
  id: ID!
}

input DeactivateLegalEntityPayload {
  legalEntity: LegalEntity
}

"""
Legal Entity contains data about medical service providers, pharamcies and MISes.
In order to obtain details user must have a scope `legal_entity:read`.

NHS admin can verify Legal Entity having a scope `legal_entity:nhs_verify`.
Also it's possible to deactivate Legal Entity having a scope `legal_entity:deactivate`
"""
type LegalEntity {
  id: ID!
  "full official name of legal entity also the name to show on public sources [as map, portal etc]"
  name: String!
  shortName: String
  publicName: String
  type: LegalEntityType!
  "Unified Register of Businesses and Organizations"
  edrpou: String!
  status: LegalEntityStatus!
  addresses: [Address]!
  phones: [Phone]!
  "email to contact person in charge from legal entity"
  email: String!
  "Ukrainian Industry Classification System, there is a check that at least one of next kveds is input: 86.10, 86.21, 47.73."
  kveds: [String]!
  "Dictionary OWNER_PROPERTY_TYPE State or private type of legal entity"
  ownerPropertyType: String!
  "Dictionary LEGAL_FORM - business form [as ТОВ/ФОП/ДП/КП]"
  legalForm: String!
  medicalServiceProvider: MedicalServiceProvider!
  misVerified: LegalEntityMisVerificationStatus!
  nhsVerified: Boolean
  "legal entity website"
  website: String
  "treasury registration code [Код одержувача/розпорядника бюджетних коштів для Казначейства. Вказується за наявності.]"
  receiverFundsCode: String
  "legal owner of legal entity [нформація про власника ЗОЗ, для ФОП не заповнюється]"
  beneficiary: String
  archives: [LegalEntityArchive]
  insertedAt: DateTime! @fake(locale: "uk", method: "date.past")
  "employee with employee_type='OWNER and isActive=true"
  owner: Employee!
  # employees(
  #   filter: EmployeeFilter,
  #   orderBy: EmployeeOrderBy,
  #   after: String
  #   before: String
  #   first: Int
  #   last: Int
  # ): EmployeeConnection!
  divisions(
    filter: DivisionFilter,
    orderBy: DivisionOrderBy,
    after: String
    before: String
    first: Int
    last: Int
  ): DivisionConnection!
  mergedToLegalEntity: RelatedLegalEntity
  mergedFromLegalEntities(
    filter: RelatedLegalEntityFilter
    orderBy: RelatedLegalEntityOrderBy
    after: String
    before: String
    first: Int
    last: Int
  ): RelatedLegalEntityConnection!
}

enum LegalEntityType {
  MIS
  MSP
  PHARMACY
}

enum LegalEntityStatus {
  ACTIVE
  CLOSED
}

enum LegalEntityMisVerificationStatus {
  NOT_VERIFIED
  VERIFIED
}

type MedicalServiceProvider {
  licenses: [LegalEntityLicense]
  accreditation: LegalEntityAccreditation
}

type LegalEntityLicense {
  licenseNumber: String
  issuedBy: String!
  issuedDate: Date! @fake(locale: "uk", method: "date.past", args: [100])
  expiryDate: Date @fake(locale: "uk", method: "date.past", args: [100])
  activeFromDate: Date! @fake(locale: "uk", method: "date.past", args: [100])
  whatLicensed: String
  orderNo: String!
}

type LegalEntityAccreditation {
  category: String!
  issuedDate: Date @fake(locale: "uk", method: "date.past", args: [100])
  expiryDate: Date @fake(locale: "uk", method: "date.past", args: [100])
  orderNo: String!
  orderDate: Date @fake(locale: "uk", method: "date.past", args: [100])
}

type LegalEntityArchive {
  "the date when paper documents were transferred to archive"
  date: Date @fake(locale: "uk", method: "date.past", args: [100])
  "the address of building where paper documents are"
  place: String
}
