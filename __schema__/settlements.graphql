"""
A condition to be used against `Settlement` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SettlementFilter {
  "Checks for equality with the object’s `name` field."
  name: String
}

"""
Methods to use when ordering `Settlement`.
"""
enum SettlementOrderBy {
  "Orders by the object’s `mountainGroup` field in the ascending order."
  MOUNTAIN_GROUP_ASC
  "Orders by the object’s `mountainGroup` field in the descending order."
  MOUNTAIN_GROUP_DESC
  "Orders by the object’s `name` field in the ascending order."
  NAME_ASC
  "Orders by the object’s `name` field in the descending order."
  NAME_DESC
}

"""
A connection to a list of `Settlement` values.
"""
type SettlementConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [Settlement]
  "A list of edges."
  edges: [SettlementEdge]
}

"""
Reads and enables pagination through a set of `Settlement`.
"""
type SettlementEdge {
  "The item at the end of the edge."
  node: Settlement!
  "A cursor for use in pagination."
  cursor: String!
}

"""
A city, town, village or other agglomeration of buildings where people live and work.
"""
type Settlement implements Node {
  "The ID of an object."
  id: ID!
  "Primary key identifier from the database."
  databaseId: UUID!
  "Settlement name."
  name: String!
  "State Classifier of Objects of the Administrative-Territorial Order of Ukraine."
  koatuu: String!
  "Whether the village belongs to the mountain group?"
  mountainGroup: Boolean!
  "Settlement type. The value should be present in the `SETTLEMENT_TYPE` dictionary."
  type: String!
  "Region to which settlement belongs."
  region: Region!
  "District to which settlement belongs."
  district: District
  "Parent settlement to which settlement belongs."
  parentSettlement: Settlement
  "Date and time when record was inserted."
  insertedAt: DateTime!
  "Date and time when record was updated."
  updatedAt: DateTime!
}
