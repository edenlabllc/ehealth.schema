# import Phone from "phones.graphql"
# import CreatePhonesInput from "phones.graphql"
# import CreateUserInput from "users.graphql"
"""
A condition to be used against `Party` object types.
"""
input PartyFilter {
  "Performs full-text search on object's `firstName`, `lastName` and `secondName` fields."
  fullName: String
}

"""
Personal information of employee, ex. fisrt name, last name etc.
"""
type Party implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Employee's first name."
  firstName: String! @fake(locale: "uk", method: "name.firstName", args: [1])
  "Employee's last name."
  lastName: String! @fake(locale: "uk", method: "name.lastName", args: [1])
  "Employee's second name, if exists."
  secondName: String @fake(locale: "uk", method: "name.firstName", args: [0])
  "employee's birth date."
  birthDate: Date! @fake(locale: "uk", method: "date.past", args: [100])
  "Employee's gender, is choosen from dictionary. The value should be present in the `GENDER` dictionary."
  gender: String!
  "Personal phone number."
  phones: [Phone]!
  "National person identifier."
  taxId: String!
  "Flag to show whether person rejected to have taxId"
  noTaxId: Boolean
  "Party identification documents."
  documents: [PartyDocument]!
  "Party self-description"
  aboutMyself: String
  "Amount of time during which a party holds its career, in years."
  workingExperience: Int
}

"""
Party identifier documents.
"""
type PartyDocument {
  "Dictionary DOCUMENT_TYPE"
  type: String!
  "document issue number"
  number: String!
  "authority which issued the document"
  issuedBy: String @fake(locale: "uk", method: "company.companyName")
  "the date when document was issued"
  issuedAt: Date
  "document expiration date"
  expirationDate: Date
}

"""
Inputs that should be send in order to create party.
"""
input CreatePartytInput {
  "Party birth date."
  birthDate: Date!
  "Party identifier documents"
  documents: [CreatePartyDocumentInput]!
  "Party email, user login"
  email: CreateUserInput!
  "Party first name."
  firstName: String!
  "Party gender. The value should be present in the `GENDER` dictionary."
  gender: String!
  "Party last name."
  lastName: String!
  "Flag to show whether person rejected to have taxId"
  noTaxId: Boolean
  "Party phones"
  phones: [CreatePhonesInput]!
  "Party second name"
  secondName: String
  "National person identifier."
  taxId: String!
}

"""
Party identifier documents.
"""
input CreatePartyDocumentInput {
  "Document type. The value should be present in the `DOCUMENT_TYPE` dictionary."
  type: String!
  "An issue number of the document."
  number: String!
  "Authority which issued the document."
  issuedBy: String
  "The date when the document was issued."
  issuedAt: Date
}
