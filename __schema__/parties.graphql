"""
A condition to be used against `Party` object types.
"""
input PartyFilter {
  "Performs full-text search on object's `firstName`, `lastName` and `secondName` fields."
  fullName: String
}

"""
Personal information of employee, ex. fisrt name, last name etc.
"""
type Party {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Employee's first name."
  firstName: String! @fake(locale: "uk", method: "name.firstName", args: [1])
  "Employee's last name."
  lastName: String! @fake(locale: "uk", method: "name.lastName", args: [1])
  "Employee's second name, if exists."
  secondName: String @fake(locale: "uk", method: "name.firstName", args: [0])
  "employee's birth date."
  birthDate: Date! @fake(locale: "uk", method: "date.past", args: [100])
  "Employee's gender, is choosen from dictionary. The value should be present in the `GENDER` dictionary."
  gender: String!
  "Personal phone number."
  phones: [Phone]!
  "National person identifier."
  taxId: String!
  "Flag to show whether person rejected to have taxId"
  noTaxId: Boolean
  "Party identification documents."
  documents: [PartyDocument]!
  "Party's email"
  email: String!
  "Party self-description"
  aboutMyself: String
  "Amount of time during which a party holds its career, in years."
  workingExperience: Int
}

"""
Party identifier documents.
"""
type PartyDocument {
  "Document type. The value should be present in the `DOCUMENT_TYPE` dictionary."
  type: String!
  "An issue number of the document."
  number: String!
  "Authority which issued the document."
  issuedBy: String @fake(locale: "uk", method: "company.companyName")
  "The date when the document was issued."
  issuedAt: Date
}
