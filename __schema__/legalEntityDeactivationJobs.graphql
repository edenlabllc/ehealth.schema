# import JobStatus, JobStrategy from "jobs.graphql"
# import TaskFilter, TaskOrderBy, TaskConnection from "tasks.graphql"
"""
Filter for Legal entity deactivation job.
"""
input LegalEntityDeactivationJobFilter {
  "Legal entity deactivation job status."
  status: JobStatus
  "Legal entity that was deactivated."
  deactivatedLegalEntity: deactivatedLegalEntityFilter
}

"""
Filter for Deactivated Legal entity.
"""
input deactivatedLegalEntityFilter {
  "A unique identification number of a legal entity in the State Register of Enterprises and Organizations of Ukraine."
  edrpou: String
}

"""
List of fields to filter both ask and desc side `LegalEntityDeactivationJob`.
"""
enum LegalEntityDeactivationJobOrderBy {
  "Time of duration on the job in ascending order"
  RUNTIME_ASC
  "Time of duration on the job in descending order"
  RUNTIME_DESC
  "Sort legal entity deactivation job by started at in ascending order"
  STARTED_AT_ASC
  "Sort legal entity deactivation job by started at in descending order"
  STARTED_AT_DESC
}

"""
A connection to a list of `LegalEntityDeactivationJob` values.
"""
type LegalEntityDeactivationJobConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [LegalEntityDeactivationJob]
  "A list of edges."
  edges: [LegalEntityDeactivationJobEdge]
}

"""
Reads and enables pagination through a set of `LegalEntityDeactivationJob`.
"""
type LegalEntityDeactivationJobEdge {
  "The item at the end of the edge."
  node: LegalEntityDeactivationJob!
  "A cursor for use in pagination."
  cursor: String!
}

"""
An object for LegalEntityDeactivationJob.
"""
type LegalEntityDeactivationJob implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Job name."
  name: String
  "Legal Entity deactivation job status."
  status: JobStatus!
  "Job execution strategy."
  strategy: JobStrategy!
  "Date and time when the job starts."
  startedAt: DateTime!
  "Date and time when the job ends."
  endedAt: DateTime
  "Tasks within this job."
  tasks(
    "A condition to be used in determining which values should be returned by the collection."
    filter: TaskFilter
    "The method to use when ordering collection items."
    orderBy: TaskOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): TaskConnection!
  "Legal entity that was deactivated."
  deactivatedLegalEntity: DeactivatedLegalEntityMetadata!
}

"""
Metadata of Deactivated legal entities.
"""
type DeactivatedLegalEntityMetadata {
  "Primary key identifier from the database."
  id: UUID!
  "full official name of legal entity."
  name: String!
  "Legal entity edrpou."
  edrpou: String!
}
