"""
Interface for contract request. Contains fields that are common for reimbursement and capitation versions of a contract
"""
interface Contract {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Human redable contract number"
  contractNumber: String
  "Type of contract. Dictionary"
  idForm: String!
  "Current contract's status"
  status: ContractStatus!
  "The reason of termination contract"
  statusReason: String
  "Free text to reason of termination contract"
  reason: String
  "Place of contract"
  issueCity: String
  "Html to make a prinout form"
  printoutContent: String
  "Contract start date"
  startDate: Date!
  "Contract end date"
  endDate: Date!
  "Whether the contract is active or temporary suspended"
  isSuspended: Boolean!
  "Legal entity which made contract"
  contractorLegalEntity: LegalEntity!
  "Representer of legal entity who signed contract"
  contractorOwner: Employee!
  "Documents which allows to represent clinic"
  contractorBase: String!
  "Information about MSP bank account to make payment"
  contractorPaymentDetails: ContractorPaymentDetails!

  "Divisions which were included in contract"
  contractorDivisions(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DivisionFilter
    "The method to use when ordering collection items."
    orderBy: DivisionOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DivisionConnection!

  "Representer of NHS who signed contract"
  nhsSigner: Employee
  "Information about legal entity from NHS side"
  nhsLegalEntity: LegalEntity
  "Documents which allows to represent nhs"
  nhsSignerBase: String
  "Possible ways to pay MSP. The value should be present in the `CONTRACT_PAYMENT_METHOD` dictionary."
  nhsPaymentMethod: String
  "Link to receive attached documents with particular types"
  attachedDocuments: [ContractDocument]!
  "Date and time when record was inserted"
  insertedAt: DateTime!
  "Date and time when record was updated"
  updatedAt: DateTime!
}

"""
Possible values for reorginised legal entities
"""
enum LegalEntityRelation {
  "Is merged to antoher LegalEntity."
  MERGED_FROM
  "Is the remaining after LegalEntity merge."
  MERGED_TO
}

"""
Input for `terminateContract` mutation.

NHS admin can terminate contract having a scope: `contract:terminate`.
"""
input TerminateContractInput {
  "Input for a single `contractId` using its globally unique ID."
  id: ID!
  "Input string field to update the status_reason of termination contract. The value should be present in the `CONTRACT_STATUS_REASON` dictionary."
  statusReason: String!
  "Free text to reason of termination contract"
  reason: String
}

"""
Return type for `terminateContract` mutation.
"""
type TerminateContractPayload {
  "Payload for Contract"
  contract: Contract
}

"""
Input for `prolongateContract` mutation.

NHS admin can prolongate contract having a scope `contract:update`.
Prolongate contract is possible in case the legal entity was reorganized.
"""
input ProlongateContractInput {
  "Input for a single `contractId` using its globally unique ID."
  id: ID!
  "Input for new value of contract's `endDate`"
  endDate: Date!
}

"""
Return type for `prolongateContract` mutation.
"""
type ProlongateContractPayload {
  "Payload for Contract"
  contract: Contract
}
"""
List of contract statuses.
"""
enum ContractStatus {
  "Status `TERMINATED` for contract."
  TERMINATED
  "Status `VERIFIED` for contract."
  VERIFIED
}

"""
Input for `suspendContract` mutation.

User must have scope `contract:update` in order to perform this action
"""
input SuspendContractInput {
  "Input for a single `contractId` using its globally unique ID."
  id: ID!
  "Input for new value of isSuspended. Could be only true"
  isSuspended: Boolean!
  "Free text to reason of termination contract"
  reason: String
  "The reason of termination contract. The value should be present in the `CONTRACT_STATUS_REASON` dictionary."
  statusReason: String!
}

"""
Return type for `suspendContract` mutation.
"""
type SuspendContractPayload {
  "Payload for Contract"
  contract: Contract
}
