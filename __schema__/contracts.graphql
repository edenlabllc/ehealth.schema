"""
A condition to be used against `Contract` object types. All fields are tested for equality and combined with a logical `and`.
"""
input ContractFilter {
  "Primary key identifier from the database."
  databaseId: ID

  "To filter by fields related to contractor Legal Entity"
  contractorLegalEntity: LegalEntityFilter

  "Human readable number of contract request."
  contractNumber: String

  "Status of contract request."
  status: ContractStatus

  "The interval for searching by date when contract takes effect."
  startDate: DateInterval

  "The interval for searching by date when contract ends."
  endDate: DateInterval

  "Filter to receive Contract of reorginised legal entities"
  legalEntityRelation: LegalEntityRelation

  "Whether the contract is active or temporary suspended"
  isSuspended: Boolean
}

"""
Possible values for reorginised legal entities
"""
enum LegalEntityRelation {
  "Is merged to antoher LegalEntity."
  MERGED_FROM
  "Is the remaining after LegalEntity merge."
  MERGED_TO
}

"""
Methods to use when ordering `Contracts`.
"""
enum ContractOrderBy {
  "Sort by edrpou in ascending order."
  CONTRACTOR_LEGAL_ENTITY_EDRPOU_ASC
  "Sort by edrpou in descending order."
  CONTRACTOR_LEGAL_ENTITY_EDRPOU_DESC
  "Sort by end date in ascending order."
  END_DATE_ASC
  "Sort by end date in descending order."
  END_DATE_DESC
  "Sort by inserted_at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted_at in descending order."
  INSERTED_AT_DESC
  "Sort by is suspended in ascending order."
  IS_SUSPENDED_ASC
  "Sort by is suspended in descending order."
  IS_SUSPENDED_DESC
  "Sort by start date in ascending order."
  START_DATE_ASC
  "Sort by start date in descending order."
  START_DATE_DESC
  "Sort by status in ascending order."
  STATUS_ASC
  "Sort by status in descending order."
  STATUS_DESC
}

"""
A connection to a list of `Contracts` items.
"""
type ContractConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [Contract]
  "A list of edges."
  edges: [ContractEdge]
}

"""
An edge in a connection of `ContractRequest`.
"""
type ContractEdge {
  "The item at the end of the edge."
  node: Contract!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Input fields to `TerminateContract`
"""
input TerminateContractInput {
  "Input for a single `contractId` using its globally unique ID."
  id: ID!
  "Input string field to update the reason of termination contract"
  statusReason: String
}

"""
Autogenerated return type of `TerminateContract`
"""
type TerminateContractPayload {
  "Payload for Contract"
  contract: Contract
}

"""
Input fields to `ProlongateContract`
"""
input ProlongateContractInput {
  "Input for a single `contractId` using its globally unique ID."
  id: ID!
  "Input for new value of contract's `endDate`"
  endDate: Date!
}

"""
Autogenerated return type of `ProlongateContract`
"""
type ProlongateContractPayload {
  "Payload for Contract"
  contract: Contract
}

"""
In order to obtain details user must have a scope `contract:read`.

Nhs admin can terminate contract having a scope: `contract:terminate`.
NHS admin can prolongate contract  Contract Request having a scope `contract:update`. Prolongate contract is possible in case legal entity was reorginised.
"""
type Contract implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: ID!
  "Human redable contract number"
  contractNumber: String
  "ID of main contract"
  parentContractId: ID
  "ID of contract request"
  contractRequestId: ID!
  "Type of contract. Dictionary"
  idForm: String!
  "Current contract's status"
  status: ContractStatus!
  "The reason of termination contract"
  statusReason: String
  "Place of contract"
  issueCity: String
  "Html to make a prinout form"
  printoutContent: String
  "Contract start date"
  startDate: Date!
  "Contract end date"
  endDate: Date!
  "Whether the contract is active or temporary suspended"
  isSuspended: Boolean!
  "Legal entity which made contract"
  contractorLegalEntity: LegalEntity!
  "Representer of legal entity who signed contract"
  contractorOwner: Employee!
  "Documents which allows to represent clinic"
  contractorBase: String!
  "Information about MSP bank account to make payment"
  contractorPaymentDetails: ContractorPaymentDetails!
  "The amount of population which were served by this MSP"
  contractorRmspAmount: Int!
  "Divisions which were included in contract"
  contractorDivisions(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DivisionFilter
    "The method to use when ordering collection items."
    orderBy: DivisionOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DivisionConnection!
  "Employees which were included in contract"
  contractorEmployeeDivisions(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ContractorEmployeeDivisionFilter
    "The method to use when ordering collection items."
    orderBy: ContractorEmployeeDivisionOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ContractorEmployeeDivisionConnection!
  "The existence of second appendix"
  externalContractorFlag: Boolean!
  "Second appendix"
  externalContractors: [ExternalContractor]
  "Representer of NHS who signed contract"
  nhsSigner: Employee
  "Information about legal entity from NHS side"
  nhsLegalEntity: LegalEntity
  "Documents which allows to represent nhs"
  nhsSignerBase: String
  # FIXME: contact price actually does not belong to nhs
  "Contract price, UAH"
  nhsContractPrice: Float
  # FIXME: payment method actually does not belong to nhs
  "Possible ways to pay MSP. Dictionary"
  nhsPaymentMethod: NhsPaymentMethod
  "Link to receive attached documents with particular types"
  attachedDocuments: [ContractDocument]!
}

"""
List of contract statuses.
"""
enum ContractStatus {
  "Status `TERMINATED` for contract."
  TERMINATED
  "Status `VERIFIED` for contract."
  VERIFIED
}
