"""
A condition to be used against `ContractRequest` object types. All fields are tested for equality and combined with a logical `and`.
"""
input ContractRequestFilter {
  "A unique identification number of a legal entity in the State Register of Enterprises and Organizations of Ukraine."
  edrpou: String

  "Human readable number of contract request."
  contractNumber: String

  "Status of contract request."
  status: ContractRequestStatus

  "The beginning of the interval for searching date when contract takes effect."
  startDateFrom: Date

  "The end of the interval for searching date when contract takes effect."
  startDateTo: Date

  "The beginning of the interval for searching date when contract ends."
  endDateFrom: Date

  "The end of the interval for searching date when contract ends."
  endDateTo: Date

  "ID of a person who is responsible for the contract."
  assigneeId: ID

  "Name of a person who is responsible for the contract."
  assigneeName: String
}

"""
Methods to use when ordering `ContractRequest`.
"""
enum ContractRequestOrderBy {
  EDRPOU_ASC
  EDRPOU_DESC
  END_DATE_ASC
  END_DATE_DESC
  STATUS_ASC
  STATUS_DESC
  START_DATE_ASC
  START_DATE_DESC
}

"""
A connection to a list of `ContractRequest` items.
"""
type ContractRequestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [ContractRequest]
  "A list of edges."
  edges: [ContractRequestEdge]
}

"""
An edge in a connection of `ContractRequest`.
"""
type ContractRequestEdge {
  "The item at the end of the edge."
  node: ContractRequest!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Inputs that should be filled for update contract request. ContractRequest is updated by NHS employee through NHS Admin portal.
"""
input UpdateContractRequestInput {
  "ID of NHS employee who can sign contracts."
  nhsSignerId: ID

  "Proof for the employee to sign contracts."
  nhsSignerBase: String

  "The price for the contract. Is filled with UAH"
  nhsContractPrice: Float

  "The payment method for contract."
  nhsPaymentMethod: NhsPaymentMethod

  "The city where contract is signed."
  issueCity: String

  "Additional information in contract."
  miscellaneous: String
}

"""
The payload that should be sent to update contractRequest.
"""
type UpdateContractRequestPayload {
  "Payload for a ContractRequest."
  contractRequest: ContractRequest
}

"""
The fields that are necessery in order to set an assignee for a contractRequest.
"""
input AssignContractRequestInput {
  "Input for a single `contractRequestId` using its globally unique ID."
  contractRequestId: ID!
  "Input for a single `employeeId` using its globally unique ID."
  employeeId: ID!
}

"""
Autogenerated return type of `AssignContractRequest`
"""
type AssignContractRequestPayload {
  contractRequest: ContractRequest
}

"""
Autogenerated input type of `DeclineContractRequest`
"""
input DeclineContractRequestInput {
  signedContent: SignedContent!
}

"""
Autogenerated return type of `DeclineContractRequest`
"""
type DeclineContractRequestPayload {
  contractRequest: ContractRequest
}

"""
Autogenerated input type of `ApproveContractRequest`
"""
input ApproveContractRequestInput {
  signedContent: SignedContent!
}

"""
Autogenerated return type of `ApproveContractRequest`
"""
type ApproveContractRequestPayload {
  contractRequest: ContractRequest
}

"""
Autogenerated input type of `SignContractRequest`
"""
input SignContractRequestInput {
  signedContent: SignedContent!
}

"""
Autogenerated return type of `SignContractRequest`
"""
type SignContractRequestPayload {
  contractRequest: ContractRequest
}

"""
In order to obtain details user must have a scope `contract_request:read`.

Nhs admin can assign contract request to NHS Employee having a scope: `contract_requst:update`.
NHS admin can approve Contract Request having a scope `contract_request:approve`.
It's possible to decline Contract Request having a scope `contract_request:decline`
NHS admin can sign contract request in status ='PENDING_NHS_SIGN'. Method receives signed message (pkcs7) including signed content, digital signature and signer public key in signed_content property.
"""
type ContractRequest implements Node {
  "The ID of an object."
  id: ID!
  "Primary key identifier from the database."
  databaseId: ID!
  "Human readable number of contract request."
  contractNumber: String
  "Primary key identifier from the database of the contract that is prolongated."
  parentContractId: ID
  "Primary key identifier from the database of the contractRequest that is changed."
  previousRequest: ID
  "Person who is responsible for the contract."
  assignee: Employee
  "ID of the print form."
  idForm: String!
  "Status of ContractRequest. Is set automatically."
  status: ContractRequestStatus!
  "Text, that is added in case Contract request was declined by NHS employee."
  statusReason: String
  "The city where contract is signed."
  issueCity: String
  "Content od printout form in html format."
  printoutContent: String
  "The day when contract takes effect."
  startDate: Date!
  "The day when contract ends."
  endDate: Date!
  "Block of information about legal entity in the contract."
  contractorLegalEntity: LegalEntity!
  "Information about owner in legal entity that is in the contract."
  contractorOwner: Employee!
  "Proof for the employee to sign contracts."
  contractorBase: String!
  "Paymen details for contract."
  contractorPaymentDetails: ContractorPaymentDetails!
  "Information about the red lists for legal entity in contract."
  contractorRmspAmount: Int!

  "Divisions from legal entity that are in the contract."
  contractorDivisions(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DivisionFilter
    "The method to use when ordering collection items."
    orderBy: DivisionOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DivisionConnection!

  """
  Information about employees in the contract, along with the connection each emloyee to divisions in the contract.
  """
  contractorEmployeeDivisions(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ContractorEmployeeDivisionFilter
    "The method to use when ordering collection items."
    orderBy: ContractorEmployeeDivisionOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ContractorEmployeeDivisionConnection!
  "Flag to show if external contractors exists in contract."
  externalContractorFlag: Boolean!
  "Block for exretnal contractors."
  externalContractors: [ExternalContractor]
  "Employee who will sign contract on NHS side."
  nhsSigner: Employee
  "Proof for the employee to sign contracts."
  nhsSignerBase: String
  # FIXME: contact price actually does not belong to nhs
  "The price for the contract. Is filled with UAH."
  nhsContractPrice: Float
  # FIXME: payment method actually does not belong to nhs
  "Payment method for the contract."
  nhsPaymentMethod: NhsPaymentMethod
}

"""
List of contract payment methods.
"""
enum NhsPaymentMethod {
  BACKWARD
  FORWARD
}

"""
List of contract request statuses.
"""
enum ContractRequestStatus {
  NEW
  IN_PROCESS
  DECLINED
  APPROVED
  PENDING_NHS_SIGN
  NHS_SIGNED
  TERMINATED
}

"""
Payment method for Contract.
"""
type ContractorPaymentDetails {
  "Bank name."
  bankName: String!
  "The bank codes used to route money transfers between banks."
  mfo: String!
  "Bank account number."
  payerAccount: String!
}

"""
Filters for ContractorEmployeeDivision.
"""
input ContractorEmployeeDivisionFilter {
  "Name of division."
  divisionName: String
  "Division unique ID in DB."
  divisionId: ID
}

"""
List of fields to filter both ask and desc side `ContractorEmployeeDivision`.
"""
enum ContractorEmployeeDivisionOrderBy {
  DECLARATION_LIMIT_ASC
  DECLARATION_LIMIT_DESC
  STAFF_UNITS_ASC
  STAFF_UNITS_DESC
}

"""
A connection to a list of `ContractorEmployeeDivision` values.
"""
type ContractorEmployeeDivisionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [ContractorEmployeeDivision]
  "A list of edges."
  edges: [ContractorEmployeeDivisionEdge]
}

"""
Reads and enables pagination through a set of `ContractorEmployeeDivision`.
"""
type ContractorEmployeeDivisionEdge {
  "The item at the end of the edge."
  node: ContractorEmployeeDivision!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Connection of employees and vivision of legal entity in contract.
"""
type ContractorEmployeeDivision {
  "Employee in lagal entity."
  employee: Employee!
  "Official or work unit provided by the legal entity."
  staffUnits: Float!
  "Limit of declaration that sertain employee could have."
  declarationLimit: Int!
  "Division where employee works."
  division: Division!
}

""" 
Other legal entities which has contracts for medical services with legal entity in the contract.
"""
type ExternalContractor {
  "Other legal entity information."
  legalEntity: LegalEntity!
  "Contract information."
  contract: ExternalContractorContract!
  "Division information."
  divisions: [ExternalContractorDivision]!
}

"""
Contract information with other legal entities for medical services.
"""
type ExternalContractorContract {
  "Number of a contract."
  number: String!
  "Tha date when contract with other legal entity takes effect."
  issuedAt: String!
   "Tha date when contract with other legal entity ends."
  expiresAt: String!
}

"""
Information about division that are in the contract with other legal entity.
"""
type ExternalContractorDivision {
  "Division information."
  division: Division!
  "Medical service information."
  medicalService: String!
}
