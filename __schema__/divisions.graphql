# import Address from "addresses.graphql"
# import Phone from "phones.graphql"
# import LegalEntity from "legalEntities.graphql"

"""
Fields to filter division in the system.
"""
input DivisionFilter {
  "Primary key identifier from the database."
  databaseId: ID
  "Division name."
  name: String
}

"""
Methods to use when ordering `Division`.
"""
enum DivisionOrderBy {
  "Sort division by name in ascending order."
  NAME_ASC
  "Sort division by name in descending order."
  NAME_DESC
}

"""
A connection to a list of `Division` items.
"""
type DivisionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [Division]
  "A list of edges."
  edges: [DivisionEdge]
}

"""
An edge in a connection of `Division`.
"""
type DivisionEdge {
  "The item at the end of the edge."
  node: Division!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Division contains details about places where services are provided

In order to obtain details user must have a scope **division:read**
"""
type Division implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: ID!
  "Division name."
  name: String!
  "Division address."
  addresses: [Address]!
  "Division contact phone number."
  phones: [Phone]!
  "Division contact email."
  email: String!
  "Division status, is set automatically."
  status: DivisionStatus!
  "Division type, is choosen from dictionary."
  type: DivisionType!
  "In case division address in mountain group, mountainGroup=true. Is set automatically according to division address."
  mountainGroup: Boolean!
  "Information about legal_entity"
  legalEntity: LegalEntity!
  "Division working hours."
  workingHours: DivisionWorkingHours
}

"""
List for division statuses.
"""
enum DivisionStatus {
  "Status `ACTIVE` for Division"
  ACTIVE
  "Status `INACTIVE` for Division"
  INACTIVE
}

"""
List for division tyoes.
"""
enum DivisionType {
  "Type `AMBULANT_CLINIC` for division."
  AMBULANT_CLINIC
  "Type `CLINIC` for division."
  CLINIC
  "Type `FAP` for division."
  FAP
}

"""
Division working hours structure.
"""
type DivisionWorkingHours {
  "Division working week days"
  days: [WeekDay]!
  "Division working hours, according to working days."
  hours: [TimeRange]!
}

# TODO: this type should be moved from this file
"""
List of week days, which are the part of WorkingHours for divisions.
"""
enum WeekDay {
  "The day of the week before Saturday and following Thursday."
  FRIDAY
  "The day of the week before Tuesday and following Sunday."
  MONDAY
  "The day of the week before Sunday and following Friday, and (together with Sunday) forming part of the weekend."
  SATURDAY
  "The day of the week before Monday and following Saturday, and (together with Saturday) forming part of the weekend."
  SUNDAY
  "The day of the week before Friday and following Wednesday."
  THURSDAY
  "The day of the week before Wednesday and following Monday."
  TUESDAY
  "The day of the week before Thursday and following Tuesday."
  WEDNESDAY
}

# TODO: this type should be moved from this file
"""
Time range of working hours for divisions.
"""
type TimeRange {
  "Start of workingHours for divisions."
  from: Time
  "End of workingHours for divisions."
  to: Time
}
