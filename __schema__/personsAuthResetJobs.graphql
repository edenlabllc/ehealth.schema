# import SignedContent from "signedContent.graphql"
# import JobStatus, JobStrategy from "jobs.graphql"
# import TaskFilter, TaskOrderBy, TaskConnection from "tasks.graphql"
"""
Filter for Legal entity merge job.
"""
input PersonsAuthResetJobFilter {
  "Legal entity merge job filters."
  status: JobStatus
}

"""
List of fields to filter both ask and desc side `PersonsAuthResetJob`.
"""
enum PersonsAuthResetJobOrderBy {
  "Sort legal entity merge job by started at in ascending order"
  STARTED_AT_ASC
  "Sort legal entity merge job by started at in descending order"
  STARTED_AT_DESC
}

"""
A connection to a list of `PersonsAuthResetJob` values.
"""
type PersonsAuthResetJobConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [PersonsAuthResetJob]
  "A list of edges."
  edges: [PersonsAuthResetJobEdge]
}

"""
Reads and enables pagination through a set of `PersonsAuthResetJob`.
"""
type PersonsAuthResetJobEdge {
  "The item at the end of the edge."
  node: PersonsAuthResetJob!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Input for `resetPersonsAuth` mutation.
"""
input ResetPersonsAuthInput {
  "List of persons database ids for persons Authentication reset"
  databaseIds: [UUID!]!
}

"""
Return type for `resetPersonsAuth` mutation.
"""
type ResetPersonsAuthPayload {
  "payload resetPersonsAuthPayload."
  personsAuthResetJob: PersonsAuthResetJob
}

"""
An object for PersonsAuthResetJob.
"""
type PersonsAuthResetJob implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Job name."
  name: String
  "Persons Reset Authentification Job status."
  status: JobStatus!
  "Job execution strategy."
  strategy: JobStrategy!
  "Date and time when the job starts."
  startedAt: DateTime!
  "Date and time when the job ends."
  endedAt: DateTime
  "Tasks within this job."
  tasks(
    "A condition to be used in determining which values should be returned by the collection."
    filter: TaskFilter
    "The method to use when ordering collection items."
    orderBy: TaskOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): PersonsAuthResetTaskConnection!
}

"""
A connection to a list of `PersonsAuthResetTask` values.
"""
type PersonsAuthResetTaskConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [PersonsAuthResetTask]
  "A list of edges."
  edges: [PersonsAuthResetTaskEdge]
}

"""
Reads and enables pagination through a set of `PersonsAuthResetTask`.
"""
type PersonsAuthResetTaskEdge {
  "The item at the end of the edge."
  node: PersonsAuthResetTask!
  "A cursor for use in pagination."
  cursor: String!
}

"""
A child of a `PersonsAuthResetJob`, contains the result of task execution.
"""
type PersonsAuthResetTask implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Task name."
  name: String
    @fake(
      locale: "uk"
      format: "{{company.companyName}} {{company.companySuffix}}"
    )
  "Task status, is set automatically."
  status: TaskStatus!
  "Task meta data."
  meta: PersonsAuthResetTaskMeta
  "Date and time when task was executed."
  endedAt: DateTime
  "Task error."
  error: TaskError
  "Technical information when task was inserted into the DB."
  insertedAt: DateTime!
  "Technical information when task was updated in the DB."
  updatedAt: DateTime!
}

"""
Meta data of a `PersonsAuthResetTask`.
"""
type PersonsAuthResetTaskMeta {
  "The ID of a Person"
  id: UUID!
}
