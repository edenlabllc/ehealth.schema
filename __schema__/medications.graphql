"""
Fields to filter medication in the system.
"""
input MedicationFilter {
  "Primary key identifier from the database."
  databaseId: UUID
  "Medicalation name."
  name: String
  "Activeness status."
  isActive: Boolean
  "Medication form."
  form: String
  "INNMDosage filter."
  innmDosages: INNMDosageFilter
  "Manufacturer filter."
  manufacturer: ManufacturerFilter
  "Anatomical Therapeutic Chemical Classification System"
  atcCode: String
}

"""
Manufacturer filter.
"""
input ManufacturerFilter {
  "Manufactorer name"
  name: String
}

"""
Methods to use when ordering `Medication`.
"""
enum MedicationOrderBy {
  "Sort by inserted_at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted_at in descending order."
  INSERTED_AT_DESC
  "Sort Medication by name in ascending order."
  NAME_ASC
  "Sort Medication by name in descending order."
  NAME_DESC
}

"""
A connection to a list of `Medication` items.
"""
type MedicationConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [Medication]
  "A list of edges."
  edges: [MedicationEdge]
}

"""
An edge in a connection of `Medication`.
"""
type MedicationEdge {
  "The item at the end of the edge."
  node: Medication!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Input for `createMedication` mutation. User must have scopes **medication:write**
"""
input CreateMedicationInput {
  "Certificate number"
  certificate: String
  "A day when certificate expired"
  certificateExpiredAt: Date
  "Anatomical Therapeutic Chemical Classification System"
  atcCodes: [String]!
  "A container in medication (vacuum packed box, jar, etc.)"
  container: CreateContainerInput!
  "Daily dose of medication, recommended by WHO"
  dailyDosage: Float
  "Form of medication"
  form: MedicationForm!
  "Ingredients in medication"
  ingredients: [CreateMedicationIngredientInput]!
  "Company that creates medication"
  manufacturer: CreateManufacturerInput
  "Medication name"
  name: String!
  "A minimum quantity that could be sold"
  packageMinQty: Int
  "Quantity of pills in medication"
  packageQty: Int
}

"""
Input for `CreateMedicationInput.container`.
"""
input CreateContainerInput {
  "Numerator unit"
  numeratorUnit: MedicationUnit!
  "Numerator value"
  numeratorValue: String!
  "Denumerator unit"
  denumeratorUnit: MedicationUnit!
  "Denumerator value"
  denumeratorValue: String!
}

"""
Input for `medicationIngredient` mutation.
"""
input CreateMedicationIngredientInput {
  "The size or frequency of a dose of a medicine or drug."
  dosage: CreateDosageInput!
  "Is the component primary or not"
  isPrimary: Boolean!
  "International Nonproprietary Name"
  innmDosage: CreateINNMDosageInput!
}

"""
Input for `Dosage` mutation.
"""
input CreateDosageInput {
  "Numerator unit"
  numeratorUnit: MedicationUnit!
  "Numerator value"
  numeratorValue: String!
  "Denumerator unit"
  denumeratorUnit: MedicationUnit!
  "Denumerator value"
  denumeratorValue: String!
}

"""
Input for `manufacturer` mutation
"""
input CreateManufacturerInput {
  "Manufacturer country"
  country: String!
  "Manufacturer name"
  name: String!
}

"""
Return type for `createMedication` mutation.
"""
type CreateMedicationPayload {
  "Created `Medication`."
  medication: Medication
}

"""
Input for `Medication` mutation. User must have scopes **medication:deactivate**
"""
input DeactivateMedicationInput {
  "The ID of an object"
  id: ID!
}

"""
Return type for `Medication` mutation.
"""
type DeactivateMedicationPayload {
  "Deactivated `Medication`."
  medication: Medication
}

"""
Trade mark medication. User must have a scope **medication:read**
"""
type Medication implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Medication name"
  name: String!
  "Company that creates medication"
  manufacturer: Manufacturer
  "Anatomical Therapeutic Chemical Classification System"
  atcCodes: [String]!
  "form of medication"
  form: MedicationForm
  "A container in medication (vacuum packed box, jar, etc.)"
  container: Container!
  "Quantity of pills in medication"
  packageQty: Int
  "A minimum quantity that could be sold"
  packageMinQty: Int
  "Certificate number"
  certificate: String
  "A day when certificate expired"
  certificateExpiredAt: Date
  "Ingredients in medication"
  ingredients: [MedicationIngredient]!
  "is_active status"
  isActive: Boolean!
  "type od medication"
  type: MedicationType
  "Date and time when record was inserted"
  insertedAt: DateTime!
  "Date and time when record was updated"
  updatedAt: DateTime!
}

"""
A company that makes medication.
"""
type Manufacturer {
  "Manufacturer name"
  name: String!
  "Manufacturer country"
  country: String!
}

"""
Medication form.
"""
enum MedicationForm {
  "A colloid system in which solid or liquid particles are suspended in a gas"
  AEROSOL_FOR_INHALATION
  "Aerosole with a dose"
  AEROSOL_FOR_INHALATION_DOSED
  "A solid disc of one or more pharmaceutic agents that is coated with sugar or a flavoring"
  COATED_TABLET
  "A thin polymer based coat applied to a solid dosage form such as a tablet"
  FILM_COATED_TABLET
  "A device that delivers medication to the lungs in the form of a dry powder "
  INHALATION_POWDER
  "a mechanism that delivers a drug with a delay after its administration or for a prolonged period of time or to a specific target in the body"
  MODIFIEDRELEASE_TABLET
  "A drug delivery device used to administer medication in the form of a mist inhaled into the lungs"
  NEBULISER_SUSPENSION
  "A pressurized canister of medication that fits into a mouthpiece"
  PRESSURISED_INHALATION
  "Tablets which easily melt in the mouth"
  SUBLINGVAL_TABLET
  "A small mass of solid medicine for swallowing whole"
  TABLET
}

"""
The kind of container that this package comes as.
"""
type Container {
  "Numerator unit"
  numeratorUnit: MedicationUnit!
  "Numerator value"
  numeratorValue: String!
  "Denumerator unit"
  denumeratorUnit: MedicationUnit!
  "Denumerator value"
  denumeratorValue: String!
}

"""
A component part of medication.
"""
type MedicationIngredient implements Ingredient {
  "The size or frequency of a dose of a medicine or drug."
  dosage: Dosage!
  "Is the component primary or not"
  isPrimary: Boolean!
  "International Nonproprietary Name"
  innmDosage: INNMDosage!
}

"""
Medication type.
"""
enum MedicationType {
  "Trade name"
  BRAND
  "Medicinal forms"
  INNM_DOSAGE
}
