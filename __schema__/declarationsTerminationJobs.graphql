# import JobStatus, JobStrategy from "jobs.graphql"
# import TaskFilter, TaskOrderBy, TaskConnection from "tasks.graphql"
"""
Filter for declarations termination merge job.
"""
input DeclarationsTerminationJobFilter {
  "Declarations termination merge job filters."
  status: JobStatus
}

"""
List of fields to filter both ask and desc side `DeclarationsTerminationJob`.
"""
enum DeclarationsTerminationJobOrderBy {
  "Sort declarations terminatio merge job by started at in ascending order"
  STARTED_AT_ASC
  "Sort declarations terminatio merge job by started at in descending order"
  STARTED_AT_DESC
}

"""
A connection to a list of `DeclarationsTerminationJob` values.
"""
type DeclarationsTerminationJobConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [DeclarationsTerminationJob]
  "A list of edges."
  edges: [DeclarationsTerminationJobEdge]
}

"""
Reads and enables pagination through a set of `DeclarationsTerminationJob`.
"""
type DeclarationsTerminationJobEdge {
  "The item at the end of the edge."
  node: DeclarationsTerminationJob!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Input for `terminateDeclarations` mutation.
"""
input TerminateDeclarationsInput {
  "Type of register originating deactivation data. The value should be present in the `REGISTER_TYPE` dictionary."
  registerType: String!
  "Deactivation reason description."
  reasonDescription: String!
  "Set of primary key identifiers from the database of a `Declaration` to terminate."
  databaseIds: [UUID!]!
}

"""
Return type for `terminateDeclarations` mutation.
"""
type TerminateDeclarationsPayload {
  "payload terminateDeclarationsPayload."
  declarationsTerminationJob: DeclarationsTerminationJob
}

"""
An object for DeclarationsTerminationJob.
"""
type DeclarationsTerminationJob implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Job name."
  name: String
  "Declarations Termination Job status."
  status: JobStatus!
  "Job execution strategy."
  strategy: JobStrategy!
  "Job metadata."
  meta: DeclarationsTerminationJobMeta
  "Date and time when the job starts."
  startedAt: DateTime!
  "Date and time when the job ends."
  endedAt: DateTime
  "Tasks within this job."
  tasks(
    "A condition to be used in determining which values should be returned by the collection."
    filter: TaskFilter
    "The method to use when ordering collection items."
    orderBy: TaskOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DeclarationsTerminationTaskConnection!
}

"""
Metadata of a `DeclarationsTerminationJob`.
"""
type DeclarationsTerminationJobMeta {
  "Type of register originating deactivation data. The value should be present in the `REGISTER_TYPE` dictionary."
  registerType: String!
  "Deactivation reason description."
  reasonDescription: String!
}

"""
A connection to a list of `DeclarationTerminationTask` values.
"""
type DeclarationsTerminationTaskConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [DeclarationsTerminationTask]
  "A list of edges."
  edges: [DeclarationsTerminationTaskEdge]
}

"""
Reads and enables pagination through a set of `DeclarationsTerminationTask`.
"""
type DeclarationsTerminationTaskEdge {
  "The item at the end of the edge."
  node: DeclarationsTerminationTask!
  "A cursor for use in pagination."
  cursor: String!
}

"""
A child of a `DeclarationsTerminationJob`, contains the result of task execution.
"""
type DeclarationsTerminationTask implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Task name."
  name: String
    @fake(
      locale: "uk"
      format: "{{company.companyName}} {{company.companySuffix}}"
    )
  "Task status, is set automatically."
  status: TaskStatus!
  "Task meta data."
  meta: DeclarationsTerminationTaskMeta
  "Date and time when task was executed."
  endedAt: DateTime
  "Task error."
  error: TaskError
  "Technical information when task was inserted into the DB."
  insertedAt: DateTime!
  "Technical information when task was updated in the DB."
  updatedAt: DateTime!
}

"""
Metadata of a `DeclarationsTerminationTask`.
"""
type DeclarationsTerminationTaskMeta {
  "Set of primary key identifiers from the database of a `Declaration`."
  databaseId: UUID!
}
