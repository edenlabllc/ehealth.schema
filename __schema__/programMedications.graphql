# import MedicalProgram from "medicalPrograms.graphql"
# import Medication from "medications.graphql"

"""
Fields to filter reimbursement program medication in the system.
"""
input ProgramMedicationFilter {
  "Primary key identifier from the database."
  databaseId: UUID
  "Medical program filter."
  medicalProgram: MedicalProgramFilter
  "is_active status."
  isActive: Boolean
  "Medication request allowed status"
  medicationRequestAllowed: Boolean
  "Medication filter"
  medication: MedicationFilter
}

"""
Methods to use when ordering `ProgramMedication`.
"""
enum ProgramMedicationOrderBy {
  "Sort by inserted_at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted_at in descending order."
  INSERTED_AT_DESC
}

"""
A connection to a list of `ProgramMedication` items.
"""
type ProgramMedicationConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [ProgramMedication]
  "A list of edges."
  edges: [ProgramMedicationEdge]
}

"""
An edge in a connection of `ProgramMedication`.
"""
type ProgramMedicationEdge {
  "The item at the end of the edge."
  node: ProgramMedication!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Input for `createProgramMedication` mutation.
"""
input CreateProgramMedicationInput {
  "Id of medication"
  medicationId: ID!
  "Medical program Identifier"
  medicalProgramId: ID!
  "Reimbursement information"
  reimbursement: CreateReimbursementInput!
  "Factory gate price for package of medications"
  wholesalePrice: Float!
  "Consumer price for package of medications"
  consumerPrice: Float!
  "Reimbuersement amount for recommended daily dosage of medication"
  reimbursementDailyDosage: Float!
  "The estimatied amount which patient should pay for package of medications after reimbursement"
  estimatedPaymentAmount: Float!
}

"""
Input for `Reimbursement` of `createProgramMedication` mutation.

User must have a scope **program_medication:write**
"""
input CreateReimbursementInput {
  "Reimbursement type"
  type: ReimbursementType!
  "Reimbursement amount"
  reimbursementAmount: Float!
}

"""
Return type for `createProgramMedication` mutation.
"""
type CreateProgramMedicationPayload {
  "Created `ProgramMedication`."
  programMedication: ProgramMedication
}

"""
Input for `updateProgramMedication` mutation.

User must have a scope **program_medication:write**
"""
input UpdateProgramMedicationInput {
  "The ID of an object."
  id: ID!
  "Whether `ProgramMedication` is active or not?"
  isActive: Boolean
  "Whether requesting medications allowed for the `ProgramMedication` or not?"
  medicationRequestAllowed: Boolean
  "Reimbursement information."
  reimbursement: UpdateReimbursementInput
}

"""
Input for `Reimbursement` of `updateProgramMedication` mutation.
"""
input UpdateReimbursementInput {
  "Amount to reimburse for medication package by `MedicalProgram`."
  reimbursementAmount: Float
}

"""
Return type for `updateProgramMedication` mutation.
"""
type UpdateProgramMedicationPayload {
  "Updated `ProgramMedication`."
  programMedication: ProgramMedication
}

"""
Program Medication linkes medication and medical program.

In order to obtain details user must have a scope **program_medication:read**
"""
type ProgramMedication implements Node {
  "The ID of an object."
  id: ID!
  "Primary key identifier from the database."
  databaseId: UUID!
  "MedicalProgram."
  medicalProgram: MedicalProgram!
  "Medication"
  medication: Medication!
  "Reimbursement information."
  reimbursement: Reimbursement!
  "Factory gate price for package of medications"
  wholesalePrice: Float!
  "Consumer price for package of medications"
  consumerPrice: Float!
  "Reimbuersement amount for recommended daily dosage of medication"
  reimbursementDailyDosage: Float!
  "The estimatied amount which patient should pay for package of medications after reimbursement"
  estimatedPaymentAmount: Float!
  "Whether `ProgramMedication` is active or not?"
  isActive: Boolean!
  "Whether requesting medications allowed for the `ProgramMedication` or not?"
  medicationRequestAllowed: Boolean!
  "Date and time when record was inserted"
  insertedAt: DateTime!
  "Date and time when record was updated"
  updatedAt: DateTime!
}

"""
Reimbursement information for current program medication.
"""
type Reimbursement {
  "Fixed or external type of reimbursement"
  type: ReimbursementType!
  "Amount to reimburse for medication package by `MedicalProgram`."
  reimbursementAmount: Float!
}

"""
List of reimbursement types.
"""
enum ReimbursementType {
  "Denotes that reimbursement type is external"
  EXTERNAL
  "Denotes that reimbursement type is fixed."
  FIXED
}
