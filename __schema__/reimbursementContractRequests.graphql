"""
A condition to be used against `ReimbursementContractRequest` object types. All fields are tested for equality and combined with a logical `and`.
"""
input ReimbursementContractRequestFilter {
  "Primary key identifier from the database."
  databaseId: UUID

  "Human readable number of contract request."
  contractNumber: String

  "Status of contract request."
  status: ContractRequestStatus

  "The interval for searching by date when contract takes effect."
  startDate: DateInterval

  "The interval for searching by date when contract ends."
  endDate: DateInterval

  "Conditions to check on fields of the object’s `assignee` field."
  assignee: EmployeeFilter

  "Conditions to check on fields of the object’s `contractorLegalEntity` field."
  contractorLegalEntity: LegalEntityFilter

  "Conditions to check on fields of the object’s `medicalProgram` field."
  medicalProgram: MedicalProgramFilter
}

"""
Methods to use when ordering `ReimbursementContractRequest`.
"""
enum ReimbursementContractRequestOrderBy {
  "Sort by end date in ascending order."
  END_DATE_ASC
  "Sort by end date in descending order."
  END_DATE_DESC
  "Sort by inserted_at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted_at in descending order."
  INSERTED_AT_DESC
  "Sort by start date in ascending order."
  START_DATE_ASC
  "Sort by start date in descending order."
  START_DATE_DESC
  "Sort by status in ascending order."
  STATUS_ASC
  "Sort by status in descending order."
  STATUS_DESC
}

"""
A connection to a list of `ReimbursementContractRequest` items.
"""
type ReimbursementContractRequestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [ReimbursementContractRequest]
  "A list of edges."
  edges: [ReimbursementContractRequestEdge]
}

"""
An edge in a connection of `ContractRequest`.
"""
type ReimbursementContractRequestEdge {
  "The item at the end of the edge."
  node: ReimbursementContractRequest!
  "A cursor for use in pagination."
  cursor: String!
}

"""
In order to obtain details user must have a scope `contract_request:read`.

NHS admin can assign contract request to NHS Employee having a scope: `contract_requst:update`.
NHS admin can approve Contract Request having a scope `contract_request:approve`.
It's possible to decline Contract Request having a scope `contract_request:decline`
NHS admin can sign contract request in status ='PENDING_NHS_SIGN'. Method receives signed message (pkcs7) including signed content, digital signature and signer public key in signed_content property.
"""
type ReimbursementContractRequest implements Node & ContractRequest {
  "The ID of an object."
  id: ID!
  "Primary key identifier from the database."
  databaseId: UUID!
  "Human readable number of contract request."
  contractNumber: String
    @fake(randexp: "\\d{4}-[\\dAEHKMPTX]{4}-[\\dAEHKMPTX]{4}$")
  "Contract that is prolongated."
  parentContract: ReimbursementContract
  "ContractRequest that is changed."
  previousRequest: ReimbursementContractRequest
  "Person who is responsible for the contract."
  assignee: Employee
  "The type of the contract."
  idForm: String!
  "Status of ContractRequest. Is set automatically."
  status: ContractRequestStatus!
  "Text, that is added in case Contract request was declined by NHS employee."
  statusReason: String @fake(locale: "uk", method: "lorem.sentence")
  "The city where contract is signed."
  issueCity: String @fake(locale: "uk", method: "address.city")
  "Content od printout form in html format."
  printoutContent: String @fake(locale: "uk", method: "lorem.sentences")
  "The day when contract takes effect."
  startDate: Date!
  "The day when contract ends."
  endDate: Date! @fake(locale: "uk", method: "date.future", args: [10])
  "Block of information about legal entity in the contract."
  contractorLegalEntity: LegalEntity!
  "Information about owner in legal entity that is in the contract."
  contractorOwner: Employee!
  "Proof for the employee to sign contracts."
  contractorBase: String! @fake(locale: "uk", method: "lorem.sentence")
  "Information about MSP bank account to make payment."
  contractorPaymentDetails: ContractorPaymentDetails!
  "Divisions from legal entity that are in the contract."
  contractorDivisions: [Division]
  "Employee who will sign contract on NHS side."
  nhsSigner: Employee
  "Information about legal entity from NHS side"
  nhsLegalEntity: LegalEntity
  "Documents which allows to represent nhs"
  nhsSignerBase: String @fake(locale: "uk", method: "lorem.sentence")
  "Payment method for the contract. The value should be present in the `CONTRACT_PAYMENT_METHOD` dictionary."
  nhsPaymentMethod: String
  "Link to receive attached documents with particular types."
  attachedDocuments: [ContractDocument]!
  "Additional conditions to contract."
  miscellaneous: String @fake(locale: "uk", method: "lorem.sentences")
  "Data which should be signed by NHS employee in order to approve given `ContractRequest`."
  toApproveContent: JSON
  "Data which should be signed by NHS employee in order to decline given `ContractRequest`."
  toDeclineContent: JSON
  "Data which should be signed by NHS employee in order to sign given `ContractRequest`."
  toSignContent: JSON
  "Medical program that is a subject of a reimbursement contract."
  medicalProgram: MedicalProgram!
  "Date and time when record was inserted"
  insertedAt: DateTime!
  "Date and time when record was updated"
  updatedAt: DateTime!
}
