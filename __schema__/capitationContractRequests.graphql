"""
A condition to be used against `CapitationContractRequest` object types. All fields are tested for equality and combined with a logical `and`.
"""
input CapitationContractRequestFilter {
  "Primary key identifier from the database."
  databaseId: UUID

  "A unique identification number of a legal entity in the State Register of Enterprises and Organizations of Ukraine."
  contractorLegalEntityEdrpou: String

  "Human readable number of contract request."
  contractNumber: String

  "Status of contract request."
  status: ContractRequestStatus

  "The interval for searching by date when contract takes effect."
  startDate: DateInterval

  "The interval for searching by date when contract ends."
  endDate: DateInterval

  "ID of a person who is responsible for the contract."
  assigneeId: UUID

  "Name of a person who is responsible for the contract."
  assigneeName: String
}

"""
Methods to use when ordering `CapitationContractRequest`.
"""
enum CapitationContractRequestOrderBy {
  "Sort by end date in ascending order."
  END_DATE_ASC
  "Sort by end date in descending order."
  END_DATE_DESC
  "Sort by inserted_at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted_at in descending order."
  INSERTED_AT_DESC
  "Sort by start date in ascending order."
  START_DATE_ASC
  "Sort by start date in descending order."
  START_DATE_DESC
  "Sort by status in ascending order."
  STATUS_ASC
  "Sort by status in descending order."
  STATUS_DESC
}

"""
A connection to a list of `CapitationContractRequest` items.
"""
type CapitationContractRequestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [CapitationContractRequest]
  "A list of edges."
  edges: [CapitationContractRequestEdge]
}

"""
An edge in a connection of `CapitationContractRequest`.
"""
type CapitationContractRequestEdge {
  "The item at the end of the edge."
  node: CapitationContractRequest!
  "A cursor for use in pagination."
  cursor: String!
}
"""
In order to obtain details user must have a scope `contract_request:read`.

NHS admin can assign contract request to NHS Employee having a scope: `contract_requst:update`.
NHS admin can approve Contract Request having a scope `contract_request:approve`.
It's possible to decline Contract Request having a scope `contract_request:decline`
NHS admin can sign contract request in status ='PENDING_NHS_SIGN'. Method receives signed message (pkcs7) including signed content, digital signature and signer public key in signed_content property.
"""
type CapitationContractRequest implements Node & ContractRequest {
  "The ID of an object."
  id: ID!
  "Primary key identifier from the database."
  databaseId: UUID!
  "Human readable number of contract request."
  contractNumber: String
    @fake(randexp: "\\d{4}-[\\dAEHKMPTX]{4}-[\\dAEHKMPTX]{4}$")
  "Contract that is prolongated."
  parentContract: CapitationContract
  "ContractRequest that is changed."
  previousRequest: CapitationContractRequest
  "Person who is responsible for the contract."
  assignee: Employee
  "The type of the contract."
  idForm: String!
  "Status of ContractRequest. Is set automatically."
  status: ContractRequestStatus!
  "Text, that is added in case Contract request was declined by NHS employee."
  statusReason: String @fake(locale: "uk", method: "lorem.sentence")
  "The city where contract is signed."
  issueCity: String @fake(locale: "uk", method: "address.city")
  "Content od printout form in html format."
  printoutContent: String @fake(locale: "uk", method: "lorem.sentences")
  "The day when contract takes effect."
  startDate: Date!
  "The day when contract ends."
  endDate: Date! @fake(locale: "uk", method: "date.future", args: [10])
  "Block of information about legal entity in the contract."
  contractorLegalEntity: LegalEntity!
  "Additional conditions to contract."
  miscellaneous: String @fake(locale: "uk", method: "lorem.sentences")
  "Information about owner in legal entity that is in the contract."
  contractorOwner: Employee!
  "Proof for the employee to sign contracts."
  contractorBase: String! @fake(locale: "uk", method: "lorem.sentence")
  "Information about MSP bank account to make payment."
  contractorPaymentDetails: ContractorPaymentDetails!
  "Divisions from legal entity that are in the contract."
  contractorDivisions: [Division]
  "Employee who will sign contract on NHS side."
  nhsSigner: Employee
  "Information about legal entity from NHS side"
  nhsLegalEntity: LegalEntity
  "Documents which allows to represent nhs"
  nhsSignerBase: String @fake(locale: "uk", method: "lorem.sentence")
  "Payment method for the contract."
  nhsPaymentMethod: NhsPaymentMethod
  "Link to receive attached documents with particular types."
  attachedDocuments: [ContractDocument]!
  "Date and time when record was inserted"
  insertedAt: DateTime!
  "Date and time when record was updated"
  updatedAt: DateTime!

  "Information about the red lists for legal entity in contract."
  contractorRmspAmount: Int!

  "Information about employees in the contract, along with the connection each emloyee to divisions in the contract."
  contractorEmployeeDivisions: [ContractorEmployeeDivision]

  "Flag to show if external contractors exists in contract."
  externalContractorFlag: Boolean!
  "Block for exretnal contractors."
  externalContractors: [ExternalContractor]
  # FIXME: contact price actually does not belong to nhs
  "The price for the contract. Is filled with UAH."
  nhsContractPrice: Float @fake(locale: "uk", method: "finance.amount")
}

"""
List of contract payment methods.
"""
enum NhsPaymentMethod {
  "Payment method when paymnet is made after the payment date."
  BACKWARD
  "Payment method when paymnet is made before the payment date."
  FORWARD
}

"""
List of contract request statuses.
"""
enum ContractRequestStatus {
  "Status `APPROVED` for contract request."
  APPROVED
  "Status `DECLINED` for contract request."
  DECLINED
  "Status `IN_PROCESS` for contract request."
  IN_PROCESS
  "Status `NEW` for contract request."
  NEW
  "Status `NHS_SIGNED` for contract request."
  NHS_SIGNED
  "Status `PENDING_NHS_SIGN` for contract request."
  PENDING_NHS_SIGN
  "Status `SIGNED` for contract request."
  SIGNED
  "Status `TERMINATED` for contract request."
  TERMINATED
}

"""
Information about attached documents to contract.
"""
type ContractDocument {
  "type of document which was uploaded"
  type: ContractDocumentsType!
  "url to get the document"
  url: String! @fake(method: "image.image")
}

"""
Possible types of attached to contract documents
"""
enum ContractDocumentsType {
  "uploaded additional document"
  CONTRACT_REQUEST_ADDITIONAL_DOCUMENT
  "uploaded statute document"
  CONTRACT_REQUEST_STATUTE
  "type of upload documents with signed content"
  SIGNED_CONTENT
}

"""
Information about MPS bank account.
"""
type ContractorPaymentDetails {
  "Bank name."
  bankName: String! @fake(locale: "uk", method: "company.companyName")
  "The bank codes used to route money transfers between banks."
  mfo: String! @fake(randexp: "^[0-9]{6}$")
  "Bank account number."
  payerAccount: String! @fake(randexp: "^[0-9]{16}$")
}

"""
Filters for ContractorEmployeeDivision.
"""
input ContractorEmployeeDivisionFilter {
  "Filter by division."
  division: DivisionFilter
}

"""
List of fields to filter both ask and desc side `ContractorEmployeeDivision`.
"""
enum ContractorEmployeeDivisionOrderBy {
  "Sort ContractorEmployeeDivision by declaratiom limit in ascending order"
  DECLARATION_LIMIT_ASC
  "Sort ContractorEmployeeDivision by declaratiom limit in descending order"
  DECLARATION_LIMIT_DESC
  "Sort ContractorEmployeeDivision by staff units in ascending order"
  STAFF_UNITS_ASC
  "Sort ContractorEmployeeDivision by staff units in descending order"
  STAFF_UNITS_DESC
}

"""
A connection to a list of `ContractorEmployeeDivision` values.
"""
type ContractorEmployeeDivisionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [ContractorEmployeeDivision]
  "A list of edges."
  edges: [ContractorEmployeeDivisionEdge]
}

"""
Reads and enables pagination through a set of `ContractorEmployeeDivision`.
"""
type ContractorEmployeeDivisionEdge {
  "The item at the end of the edge."
  node: ContractorEmployeeDivision!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Connection of employees and vivision of legal entity in contract.
"""
type ContractorEmployeeDivision {
  "Employee in legal entity."
  employee: Employee!
  "Official or work unit provided by the legal entity."
  staffUnits: Float!
  "Limit of declaration that sertain employee could have."
  declarationLimit: Int!
  "Division where employee works."
  division: Division!
}

"""
Other legal entities which has contracts for medical services with legal entity in the contract.
"""
type ExternalContractor {
  "Other legal entity information."
  legalEntity: LegalEntity!
  "Contract information."
  contract: ExternalContractorContract!
  "Division information."
  divisions: [ExternalContractorDivision]!
}

"""
Contract information with other legal entities for medical services.
"""
type ExternalContractorContract {
  "Number of a contract."
  number: String!
  "The date when contract with other legal entity takes effect."
  issuedAt: Date!
  "The date when contract with other legal entity ends."
  expiresAt: Date!
}

"""
Information about division that are in the contract with other legal entity.
"""
type ExternalContractorDivision {
  "Division information."
  division: Division!
  "Medical service information."
  medicalService: String!
}
