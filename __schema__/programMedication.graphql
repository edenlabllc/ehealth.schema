# import medicalProgram from "medicalProgram.graphql"
# import medication from "medication.graphql"
"""
Fields to filter reimbursement program medication in the system.
"""
input ProgramMedicationFilter {
  "Primary key identifier from the database."
  databaseId: UUID
  "medical program name."
  name: String
  "is_active status."
  isActive: Boolean
  "medication request allowed status"
  medicationRequestAllowed: Boolean
  "medication Brand name"
  brandName:String
  "medication innm dosage name"
  innmDosageName:String
}

"""
Methods to use when ordering `ProgramMedication`.
"""
enum ProgramMedicationOrderBy {
  "Sort by inserted_at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted_at in descending order."
  INSERTED_AT_DESC
}

"""
A connection to a list of `ProgramMedication` items.
"""
type ProgramMedicationConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [ProgramMedication]
  "A list of edges."
  edges: [ProgramMedicationEdge]
}

"""
An edge in a connection of `ProgramMedication`.
"""
type ProgramMedicationEdge {
  "The item at the end of the edge."
  node: ProgramMedication!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Program Medication linkes medication and medical program.

In order to obtain details user must have a scope **program_medication:read**
"""
type ProgramMedication implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "MedicalProgram."
  medicalProgram: MedicalProgram!
  "Medication"
  medication: Medication!
  "Reimbursement information"
  reimbursement: Reimbursement!
  "Factory gate price for package of medications"
  wholesalePrice: String!
  "Consumer price for package of medications"
  consumerPrice: String!
  "Reimbuersement amount for recommended daily dosage of medication"
  reimbursement_daily_dosage: String!
  "The estimatied amount which patient should pay for package of medications after reimbursment"
  estimatedPaymentAmount: String!
  "Is_active status"
  isActive: Boolean!
  "Medication request allowed status"
  medicationRequestAllowed: Boolean!
  "Date and time when record was inserted"
  insertedAt: DateTime!
  "Date and time when record was updated"
  updatedAt: DateTime!
}

"""
Reimbursement information for current program medication
"""
type Reimbursement {
"Fixed or external type of reimbursement"
type: ReimbursementType!
"Amount to reimburse for medication package by medicalProgram"
reimbursement_amount: String!
}

"""
List of reimbursement types.
"""
enum ReimbursementType {
  "Denotes that reimbursement type is fixed."
  FIXED
  "Denotes that reimbursement type is external"
  EXTERNAL
}

"""
Inputs that should be send in order to create program medication. User must have a scope **program_medication:write**
"""
input CreateProgramMedicationInput {
	"Id of medication"
	medicationID: ID!
	"Medical program Identifier"
	medicalProgramID: ID!
	"Reimbursement information"
	reimbursement: ReimbursementInput!
	"Factory gate price for package of medications"
	wholesalePrice: Float!
	"Consumer price for package of medications"
	consumerPrice: Float!
	"Reimbuersement amount for recommended daily dosage of medication"
	reimbursement_daily_dosage: Float!
	"The estimatied amount which patient should pay for package of medications after reimbursment"
	estimatedPaymentAmount: Float!
}

input ReimbursementInput {
  type: ReimbursementType!
  reimbursementAmount: Float!
}

"""
Autogenerated return type of `createProgramMedication`
"""
type CreateProgramMedicationPayload {
  "Payload for a ProgramMedication."
  programMedictaion: ProgramMedication
}

"""
Change status `is_active` for program medication.  User must have a scope **program_medication:write**
"""
input StatusUpdateProgramMedicationInput {
	id: ID!
}

"""
Autogenerated return type of `statusUpdateProgramMedication`
"""
type StatusUpdateProgramMedicationPayload {
  "Payload for a ProgramMedication."
  programMedictaion: ProgramMedication
}

"""
Change status `MedicationRequestAllowed` for program medication.  User must have a scope **program_medication:write**
"""
input UpdateMedicationRequestAllowedInput {
	id: ID!
}

"""
Autogenerated return type of `updateMedicationRequestAllowed`
"""
type UpdateMedicationRequestAllowedPayload {
  "Payload for a ProgramMedication."
  programMedictaion: ProgramMedication
}

"""
Change reimbursement amount for program medication. User must have a scope **program_medication:write**
"""
input UpdateReimbursementAmountInput {
	programMedicationId: ID!
	reimbursementAmount: Float!
}
"""
Autogenerated return type of `updateReimbursementAmount`
"""
type UpdateReimbursementAmountPayload {
  "Payload for a ProgramMedication."
  programMedictaion: ProgramMedication
}