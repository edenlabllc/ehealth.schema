"""
A condition to be used against `GlobalBudgetContract` object types. All fields are tested for equality and combined with a logical `and`.
"""
input GlobalBudgetContractFilter {
  "Primary key identifier from the database."
  databaseId: UUID

  "Human readable number of contract."
  contractNumber: String

  "Status of contract."
  status: ContractStatus

  "The interval for searching by date when contract takes effect."
  startDate: DateInterval

  "The interval for searching by date when contract ends."
  endDate: DateInterval

  "Whether the contract is active or temporary suspended"
  isSuspended: Boolean

  "Checks object’s `medicalProgram` field using its globally unique ID."
  medicalProgram: MedicalProgramFilter

  "Conditions to check on fields of the object’s `contractorLegalEntity` field."
  contractorLegalEntity: LegalEntityFilter

  "Filter to receive Contract of reorginised legal entities"
  legalEntityRelation: LegalEntityRelation
}

"""
Methods to use when ordering `GlobalBudgetContracts`.
"""
enum GlobalBudgetContractOrderBy {
  "Sort by edrpou in ascending order."
  CONTRACTOR_LEGAL_ENTITY_EDRPOU_ASC
  "Sort by edrpou in descending order."
  CONTRACTOR_LEGAL_ENTITY_EDRPOU_DESC
  "Sort by end date in ascending order."
  END_DATE_ASC
  "Sort by end date in descending order."
  END_DATE_DESC
  "Sort by inserted_at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted_at in descending order."
  INSERTED_AT_DESC
  "Sort by is suspended in ascending order."
  IS_SUSPENDED_ASC
  "Sort by is suspended in descending order."
  IS_SUSPENDED_DESC
  "Sort by start date in ascending order."
  START_DATE_ASC
  "Sort by start date in descending order."
  START_DATE_DESC
  "Sort by status in ascending order."
  STATUS_ASC
  "Sort by status in descending order."
  STATUS_DESC
}

"""
A connection to a list of `GlobalBudgetContracts` items.
"""
type GlobalBudgetContractConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [GlobalBudgetContract]
  "A list of edges."
  edges: [GlobalBudgetContractEdge]
}

"""
An edge in a connection of `GlobalBudgetContract`.
"""
type GlobalBudgetContractEdge {
  "The item at the end of the edge."
  node: GlobalBudgetContract!
  "A cursor for use in pagination."
  cursor: String!
}

"""
In order to obtain details user must have a scope `private_contracts:read`.
"""
type GlobalBudgetContract implements Node & Contract {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Human redable contract number"
  contractNumber: String
    @fake(randexp: "^[\\dAEHKMPTX]{4}-[\\dAEHKMPTX]{4}-[\\dAEHKMPTX]{4}-C$")
  "Contract that is prolongated."
  parentContract: GlobalBudgetContract
  "Type of contract. Dictionary"
  idForm: String!
  "Current contract's status"
  status: ContractStatus!
  "The reason of termination contract"
  statusReason: String @fake(locale: "uk", method: "lorem.sentence")
  "Free text to reason of termination contract"
  reason: String
  "Place of contract"
  issueCity: String @fake(locale: "uk", method: "address.city")
  "Html to make a prinout form"
  printoutContent: String @fake(locale: "uk", method: "lorem.sentences")
  "Contract start date"
  startDate: Date!
  "Contract end date"
  endDate: Date! @fake(locale: "uk", method: "date.future", args: [10])
  "Whether the contract is active or temporary suspended"
  isSuspended: Boolean!
  "Legal entity which made contract"
  contractorLegalEntity: LegalEntity!
  "Representer of legal entity who signed contract"
  contractorOwner: Employee!
  "Documents which allows to represent clinic"
  contractorBase: String! @fake(locale: "uk", method: "lorem.sentence")
  "Information about MSP bank account to make payment"
  contractorPaymentDetails: ContractorPaymentDetails!

  "Divisions which were included in contract"
  contractorDivisions(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DivisionFilter
    "The method to use when ordering collection items."
    orderBy: DivisionOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DivisionConnection!

  "Employees which were included in contract"
  contractorEmployeeDivisions(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ContractorEmployeeDivisionFilter
    "The method to use when ordering collection items."
    orderBy: ContractorEmployeeDivisionOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ContractorEmployeeDivisionConnection!

  "Representer of NHS who signed contract"
  nhsSigner: Employee
  "Information about legal entity from NHS side"
  nhsLegalEntity: LegalEntity
  "Documents which allows to represent nhs"
  nhsSignerBase: String @fake(locale: "uk", method: "lorem.sentence")
  "Possible ways to pay MSP. The value should be present in the `CONTRACT_PAYMENT_METHOD` dictionary."
  nhsPaymentMethod: String
  "Link to receive attached documents with particular types"
  attachedDocuments: [ContractDocument]!
  "Medical programs which were included in contract"
  medicalPrograms(
    "A condition to be used in determining which values should be returned by the collection."
    filter: MedicalProgramFilter
    "The method to use when ordering collection items."
    orderBy: MedicalProgramOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): MedicalProgramConnection!
  "The price for the contract. Is filled with UAH."
  nhsContractPrice: Float @fake(locale: "uk", method: "finance.amount")
  "Date and time when record was inserted"
  insertedAt: DateTime!
  "Date and time when record was updated"
  updatedAt: DateTime!
}

"""
Input for `suspendContract` mutation.

User must have scope `private_contracts:write` in order to perform this action
"""
input SuspendGlobalBudgetContractInput {
  "Input for a single `contractId` using its globally unique ID."
  id: ID!
  "Input for new value of isSuspended. Could be only true"
  isSuspended: Boolean!
  "Free text to reason of termination contract"
  reason: String
  "The reason of termination contract. The value should be present in the `CONTRACT_STATUS_REASON` dictionary."
  statusReason: String!
}

"""
Return type for `suspendGlobalBudgetContract` mutation.
"""
type SuspendGlobalBudgetContractPayload {
  "Payload for Contract"
  contract: Contract
}
