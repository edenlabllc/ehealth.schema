"""
A condition to be used against `Address` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AddressFilter {
  "Checks for equality with the object’s `id` field."
  id: ID
  "Dictionary: ADDRESS_TYPE. Checks for equality with the object’s `type` field."
  type: String
}

"""
The `Address` type represents the physical location of a building, apartment, or other structure.
"""
type Address {
  "Dictionary: ADDRESS_TYPE. Type of address."
  type: String!
  "The name of Country."
  country: String! @fake(locale: "uk", format: "Україна")
  "The area name in specific country. Should be taken from the state directory."
  area: String! @fake(locale: "uk", method: "address.state")
  "The region name in specific area. Should be taken from the state directory."
  region: String @fake(locale: "uk", method: "address.cityPrefix")
  "The settlement name. Should be taken from the state directory and should fit settlementId."
  settlement: String! @fake(locale: "uk", method: "address.city")
  "Dictionary: SETTLEMENT_TYPE. The settlement type. Should fit settlementId and settlement name."
  settlementType: String!
  "ID of specific settlement. Should fit settlement name."
  settlementId: UUID!
  "Dictionary: STREET_TYPE. The street type."
  streetType: String
  "The street name."
  street: String @fake(locale: "uk", method: "address.streetName")
  "The number of a building."
  building: String
    @fake(
      randexp: "^[1-9]((?![ЫЪЭЁыъэё])()([А-ЯҐЇІЄа-яґїіє \\/\\'\\-0-9])){0,20}$"
    )
  "Apartment number."
  apartment: String @fake(locale: "uk", method: "random.number", args: [1000])
  "Address's zip code."
  zip: String @fake(locale: "uk", method: "address.zipCode")
}
