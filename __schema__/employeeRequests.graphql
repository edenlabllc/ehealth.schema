"""
Fields to filter employeeRequest in the system.
"""
input EmployeeRequestFilter {
  "Future user's login, email."
  email: String
  "Day diapason when employeeRequest was created."
  insertedAt: Date
  "EmployeeRequest status. The value should be present in the `EMPLOYEE_REQUEST_STATUS` dictionary."
  status: String
  "Legal entity in which employee works."
  legalEntityId: ID
}

"""
Methods to use when ordering `EmployeeRequest`.
"""
enum EmployeeRequestOrderBy {
  "Sort by full name in ascending order."
  FULL_NAME_ASC
  "Sort by full name in descending order."
  FULL_NAME_DESC
  "Sort by inserted_at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted_at in descending order."
  INSERTED_AT_DESC
  "Sort by status in ascending order."
  STATUS_ASC
  "Sort by status in descending order."
  STATUS_DESC
}

"""
A connection to a list of `EmployeeRequest` values.
"""
type EmployeeRequestConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [EmployeeRequest]
  "A list of edges."
  edges: [EmployeeRequestEdge]
}

"""
An edge in a connection of `EmployeeRequest`.
"""
type EmployeeRequestEdge {
  "The item at the end of the edge."
  node: EmployeeRequest!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Input for `createEmployeeRequest` mutation.
"""
input CreateEmployeeRequestInput {
  "Signed data to create employee request"
  signedContent: SignedContent!
}

"""
Return type for `createEmployeeRequest` mutation.
"""
type CreateEmployeeRequestPayload {
  "Payload for a CreateEmployeeRequest."
  employeeRequest: EmployeeRequest
}

"""
EmployeeRequest details contain information about Party (personal data) and Employee (professional data)
"""
type EmployeeRequest implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Birth date of person"
  birthDate: Date!
  "Party's email and login for a user"
  email: String!
  "Type of employee, is connected with user'd role. The value should be present in the `EMPLOYEE_TYPE` dictionary."
  employeeType: String!
  "First name of a person"
  firstName: String!
  "Second name of a person"
  secondName: String
  "Surname of a person"
  lastName: String!
  "Flag to show whether person rejected to have taxId"
  noTaxId: Boolean
  "Status of employee request. The value should be present in the `EMPLOYEE_REQUEST_STATUS` dictionary."
  status: String!
  "National person identifier."
  taxId: String!
  "Legal entity in which employee will work."
  legalEntity: LegalEntity!
  "Date and time when record was created."
  insertedAt: DateTime!
  "Date and time when record was updated"
  updatedAt: DateTime!
}
