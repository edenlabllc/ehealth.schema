# import * from "scalars.graphql"
# import * from "directives.graphql"
# import * from "relay.graphql"
# import * from "contracts.graphql"
# import * from "contractRequests.graphql"
# import * from "capitationContracts.graphql"
# import * from "capitationContractRequests.graphql"
# import * from "reimbursementContractRequests.graphql"
# import * from "reimbursementContracts.graphql"
# import * from "globalBudgetContracts.graphql"
# import * from "declarations.graphql"
# import * from "dictionaries.graphql"
# import * from "legalEntities.graphql"
# import * from "legalEntityMergeJobs.graphql"
# import * from "legalEntityDeactivationJobs.graphql"
# import * from "personsAuthResetJobs.graphql"
# import * from "personsDeactivationJobs.graphql"
# import * from "medicalPrograms.graphql"
# import * from "programMedications.graphql"
# import * from "ingredients.graphql"
# import * from "medications.graphql"
# import * from "innmDosages.graphql"
# import * from "innms.graphql"
# import * from "mergeRequests.graphql"
# import * from "parties.graphql"
# import * from "persons.graphql"
# import * from "personAuthenticationMethods.graphql"
# import * from "regions.graphql"
# import * from "districts.graphql"
# import * from "settlements.graphql"
# import * from "services.graphql"
# import * from "serviceGroup.graphql"
# import * from "programServices.graphql"
# import * from "employeeRequests.graphql"
# import * from "globalParameters.graphql"
# import * from "declarationsTerminationJobs.graphql"
# import * from "divisions.graphql"

"""
The query root of e-Health GraphQL interface.
"""
type Query {
  "Reads and enables pagination through a set of `CapitationContract`."
  capitationContracts(
    "A condition to be used in determining which values should be returned by the collection."
    filter: CapitationContractFilter
    "The method to use when ordering collection items."
    orderBy: CapitationContractOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): CapitationContractConnection!

  "Reads a single `CapitationContract` using its globally unique ID."
  capitationContract(id: ID!): CapitationContract

  "Reads and enables pagination through a set of `ReimbursementContract`."
  reimbursementContracts(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ReimbursementContractFilter
    "The method to use when ordering collection items."
    orderBy: ReimbursementContractOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ReimbursementContractConnection!

  "Reads a single `ReimbursementContract` using its globally unique ID."
  reimbursementContract(id: ID!): ReimbursementContract

  "Reads and enables pagination through a set of `GlobalBudgetContract`."
  globalBudgetContracts(
    "A condition to be used in determining which values should be returned by the collection."
    filter: GlobalBudgetContractFilter
    "The method to use when ordering collection items."
    orderBy: GlobalBudgetContractOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): GlobalBudgetContractConnection!

  "Reads a single `GlobalBudgetContract` using its globally unique ID."
  globalBudgetContract(id: ID!): GlobalBudgetContract

  "Reads and enables pagination through a set of `CapitationContractRequest`."
  capitationContractRequests(
    "A condition to be used in determining which values should be returned by the collection."
    filter: CapitationContractRequestFilter
    "The method to use when ordering collection items."
    orderBy: CapitationContractRequestOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): CapitationContractRequestConnection!

  "Reads a single `CapitationContractRequest` using its globally unique ID."
  capitationContractRequest(id: ID!): CapitationContractRequest

  "Reads and enables pagination through a set of `ReimbursementContract`."
  reimbursementContractRequests(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ReimbursementContractRequestFilter
    "The method to use when ordering collection items."
    orderBy: ReimbursementContractRequestOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ReimbursementContractRequestConnection!

  "Reads a single `ReimbursementContractRequest` using its globally unique ID."
  reimbursementContractRequest(id: ID!): ReimbursementContractRequest

  "Reads and enables pagination through a set of `Declaration`."
  pendingDeclarations(
    "A condition to be used in determining which values should be returned by the collection."
    filter: PendingDeclarationFilter
    "The method to use when ordering collection items."
    orderBy: DeclarationOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DeclarationConnection!

  "Reads a single `Declaration` using its globally unique ID."
  declaration(id: ID!): Declaration

  "Reads a single `Declaration` using its human readable unique number."
  declarationByNumber(declarationNumber: String!): Declaration

  "Reads a set of `Dictionary`."
  dictionaries(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DictionaryFilter
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DictionaryConnection!

  "Reads a single `Dictionary` using its name."
  dictionary(name: String!): Dictionary

  "Reads and enables pagination through a set of `Employee`."
  employees(
    "A condition to be used in determining which values should be returned by the collection."
    filter: EmployeeFilter
    "The method to use when ordering collection items."
    orderBy: EmployeeOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): EmployeeConnection!

  "Reads a single `Employee` using its globally unique ID."
  employee(id: ID!): Employee

  "Reads and enables pagination through a set of `EmployeeRequest`."
  employeeRequests(
    "A condition to be used in determining which values should be returned by the collection."
    filter: EmployeeRequestFilter
    "The method to use when ordering collection items."
    orderBy: EmployeeRequestOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): EmployeeRequestConnection!

  "Reads and enables pagination through a set of `LegalEntity`."
  legalEntities(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityConnection!

  "Reads a single `LegalEntity` using its globally unique ID."
  legalEntity(id: ID!): LegalEntity

  "Reads and enables pagination through a set of `LegalEntityMergeJob`."
  legalEntityMergeJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityMergeJobFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityMergeJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityMergeJobConnection!

  "Reads a single `LegalEntityMergeJob` using its globally unique ID."
  legalEntityMergeJob(id: ID!): LegalEntityMergeJob

  "Reads and enables pagination through a set of `LegalEntityDeactivationJob`."
  legalEntityDeactivationJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityDeactivationJobFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityDeactivationJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityDeactivationJobConnection!

  "Reads and enables pagination through a set of `PersonsAuthResetJob`."
  personsAuthResetJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: PersonsAuthResetJobFilter
    "The method to use when ordering collection items."
    orderBy: PersonsAuthResetJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): PersonsAuthResetJobConnection!

  "Reads a single `PersonsAuthResetJob` using its globally unique ID."
  personsAuthResetJob(id: ID!): PersonsAuthResetJob

  "Reads and enables pagination through a set of `PersonsDeactivationJob`."
  personsDeactivationJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: PersonsDeactivationJobFilter
    "The method to use when ordering collection items."
    orderBy: PersonsDeactivationJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): PersonsDeactivationJobConnection!

  "Reads a single `PersonsDeactivationJob` using its globally unique ID."
  personsDeactivationJob(id: ID!): PersonsDeactivationJob

  "Reads and enables pagination through a set of `DeclarationsTerminationJob`."
  declarationsTerminationJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DeclarationsTerminationJobFilter
    "The method to use when ordering collection items."
    orderBy: DeclarationsTerminationJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DeclarationsTerminationJobConnection!

  "Reads a single `DeclarationsTerminationJob` using its globally unique ID."
  declarationsTerminationJob(id: ID!): DeclarationsTerminationJob

  "Reads and enables pagination through a set of `MedicalProgram`."
  medicalPrograms(
    "A condition to be used in determining which values should be returned by the collection."
    filter: MedicalProgramFilter
    "The method to use when ordering collection items."
    orderBy: MedicalProgramOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): MedicalProgramConnection!

  "Reads and enables pagination through a set of `ProgramMedication`."
  programMedications(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ProgramMedicationFilter
    "The method to use when ordering collection items."
    orderBy: ProgramMedicationOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ProgramMedicationConnection!

  "Reads a single `programMedication` using its globally unique ID."
  programMedication(id: ID!): ProgramMedication

  "Reads and enables pagination through a set of `Medication."
  medications(
    "A condition to be used in determining which values should be returned by the collection."
    filter: MedicationFilter
    "The method to use when ordering collection items."
    orderBy: MedicationOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): MedicationConnection!

  "Reads a single `Medication` using its globally unique ID."
  medication(id: ID!): Medication

  "Reads and enables pagination through a set of `INNMDosage`."
  innmDosages(
    "A condition to be used in determining which values should be returned by the collection."
    filter: INNMDosageFilter
    "The method to use when ordering collection items."
    orderBy: INNMDosageOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): INNMDosageConnection!

  "Reads a single `INNMDosage` using its globally unique ID."
  innmDosage(id: ID!): INNMDosage

  "Reads and enables pagination through a set of `INNM`."
  innms(
    "A condition to be used in determining which values should be returned by the collection."
    filter: INNMFilter
    "The method to use when ordering collection items."
    orderBy: INNMOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): INNMConnection!

  "Reads a single `INNM` using its globally unique ID."
  innm(id: ID!): INNM

  "Reads and enables pagination through a set of `MergeRequest`."
  mergeRequests(
    "The method to use when ordering collection items."
    orderBy: MergeRequestOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): MergeRequestConnection!

  "Reads a single `MergeRequest` using its globally unique ID."
  mergeRequest(id: ID!): MergeRequest

  "Reads and enables pagination through a set of `Person`."
  persons(
    "A condition to be used in determining which values should be returned by the collection."
    filter: PersonFilter!
    "The method to use when ordering collection items."
    orderBy: PersonOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): PersonConnection!

  "Reads a single `Person` using its globally unique ID."
  person(id: ID!): Person

  "Reads and enables pagination through a set of `Settlement`."
  settlements(
    "A condition to be used in determining which values should be returned by the collection."
    filter: SettlementFilter
    "The method to use when ordering collection items."
    orderBy: SettlementOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): SettlementConnection!

  "Reads and enables pagination through a set of `Service`."
  services(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ServiceFilter
    "The method to use when ordering collection items."
    orderBy: ServiceOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ServiceConnection!

  "Reads a single `Service` using its globally unique ID."
  service(id: ID!): Service

  "Reads and enables pagination through a set of `ServiceGroup`."
  serviceGroups(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ServiceGroupFilter
    "The method to use when ordering collection items."
    orderBy: ServiceGroupOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ServiceGroupConnection!

  "Reads a single `ServiceGroup` using its globally unique ID."
  serviceGroup(id: ID!): ServiceGroup

  "Reads and enables pagination through a set of `ProgramService`."
  programServices(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ProgramServiceFilter
    "The method to use when ordering collection items."
    orderBy: ProgramServiceOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ProgramServiceConnection!

  "Reads a single `ProgramService` using its globally unique ID."
  programService(id: ID!): ProgramService

  "Reads global parameters."
  globalParameters: GlobalParameters

  "Reads a single `Division` using its globally unique ID."
  division(id: ID!): Division
}

"""
The root query for implementing GraphQL mutations.
"""
type Mutation {
  "Terminates a single `Contract` using its globally unique ID."
  terminateContract(input: TerminateContractInput!): TerminateContractPayload

  "Prolongates a single `Contract` using its globally unique ID."
  prolongateContract(input: ProlongateContractInput!): ProlongateContractPayload

  "Suspends a single `Contract` using its globally unique ID."
  suspendContract(input: SuspendContractInput!): SuspendContractPayload

  "Suspends a single `GlobalBudgetContract` using its globally unique ID."
  suspendGlobalBudgetContract(input: SuspendGlobalBudgetContractInput!): SuspendGlobalBudgetContractPayload

  "Creates a single `ContractRequest`."
  createContractRequest(
    input: CreateContractRequestInput!
  ): CreateContractRequestPayload

  "Updates a single `ContractRequest` using its globally unique ID and a patch."
  updateContractRequest(
    input: UpdateContractRequestInput!
  ): UpdateContractRequestPayload

  "Assigns a single `ContractRequest` using its globally unique ID and employee globally unique ID."
  assignContractRequest(
    input: AssignContractRequestInput!
  ): AssignContractRequestPayload

  "Declines a single `ContractRequest` using its globally unique ID and signed content."
  declineContractRequest(
    input: DeclineContractRequestInput!
  ): DeclineContractRequestPayload

  "Approves a single `ContractRequest` using its globally unique ID and signed content."
  approveContractRequest(
    input: ApproveContractRequestInput!
  ): ApproveContractRequestPayload

  "Signs a single `ContractRequest` using its globally unique ID and signed content."
  signContractRequest(
    input: SignContractRequestInput!
  ): SignContractRequestPayload

  "Terminates a single `Declaration` using its globally unique ID and the reason description."
  terminateDeclaration(
    input: TerminateDeclarationInput!
  ): TerminateDeclarationPayload

  "Terminate a list of `Declaration` using its Database IDs."
  terminateDeclarations(
    input: TerminateDeclarationsInput!
  ): TerminateDeclarationsPayload

  "Approves a single `Declaration` using its globally unique ID."
  approveDeclaration(input: ApproveDeclarationInput!): ApproveDeclarationPayload

  "Rejects a single `Declaration` using its globally unique ID."
  rejectDeclaration(input: RejectDeclarationInput!): RejectDeclarationPayload

  "Updates a single `Dictionary` using its globally unique ID and a patch."
  updateDictionary(input: UpdateDictionaryInput!): UpdateDictionaryPayload

  "Verifies a single `LegalEntity` by NHS using its globally unique ID."
  nhsVerifyLegalEntity(
    input: NhsVerifyLegalEntityInput!
  ): NhsVerifyLegalEntityPayload

  "Reviews a single `LegalEntity` by NHS using its globally unique ID."
  nhsReviewLegalEntity(
    input: NhsReviewLegalEntityInput!
  ): NhsReviewLegalEntityPayload

  "Creates a comment for a single `LegalEntity` by NHS using its globally unique ID and the comment."
  nhsCommentLegalEntity(
    input: NhsCommentLegalEntityInput!
  ): NhsCommentLegalEntityPayload

  "Updates status of a single `LegalEntity` using its globally unique ID."
  updateLegalEntityStatus(
    input: UpdateLegalEntityStatusInput!
  ): UpdateLegalEntityStatusPayload

  "Deactivates a single `LegalEntity` using its globally unique ID."
  deactivateLegalEntity(
    input: DeactivateLegalEntityInput!
  ): DeactivateLegalEntityPayload

  "Merges a pair of `LegalEntity` using signed content."
  mergeLegalEntities(input: MergeLegalEntitiesInput!): MergeLegalEntitiesPayload

  "Resets an authentication method for a single `Person` using its globally unique ID."
  resetPersonAuth(input: ResetPersonAuthInput!): ResetPersonAuthPayload

  "Resets an authentication method for a list of `Person` using its Database IDs."
  resetPersonsAuth(input: ResetPersonsAuthInput!): ResetPersonsAuthPayload

  "Deactivates a list of `Person` using their unique parameters."
  deactivatePersons(input: DeactivatePersonsInput!): DeactivatePersonsPayload

  "Updates a single `MergeRequest` using its globally unique ID and a patch."
  updateMergeRequest(input: UpdateMergeRequestInput!): UpdateMergeRequestPayload

  "Assigns a single `MergeCandidate` to current user."
  assignMergeCandidate: AssignMergeCandidatePayload

  "Creates a single `MedicalProgram`."
  createMedicalProgram(
    input: CreateMedicalProgramInput!
  ): CreateMedicalProgramPayload

  "Update a single `MedicalProgram`."
  updateMedicalProgram(
    input: UpdateMedicalProgramInput!
  ): UpdateMedicalProgramPayload

  "Deactivates a single `MedicalProgram` using its globally unique ID."
  deactivateMedicalProgram(
    input: DeactivateMedicalProgramInput!
  ): DeactivateMedicalProgramPayload

  "Creates a single `ProgramMedication`."
  createProgramMedication(
    input: CreateProgramMedicationInput!
  ): CreateProgramMedicationPayload

  "Updates a single `ProgramMedication` using its globally unique ID and a patch."
  updateProgramMedication(
    input: UpdateProgramMedicationInput!
  ): UpdateProgramMedicationPayload

  "Creates a single `INNM`."
  createInnm(input: CreateINNMInput!): CreateINNMPayload

  "Creates a single `INNMDosage`."
  createInnmDosage(input: CreateINNMDosageInput!): CreateINNMDosagePayload

  "Update a single `INNMDosage`."
  updateInnmDosage(input: UpdateINNMDosageInput!): UpdateINNMDosagePayload

  "Deactivates a single `INNMDosage` using its globally unique ID."
  deactivateInnmDosage(
    input: DeactivateINNMDosageInput!
  ): DeactivateINNMDosagePayload

  "Creates a single `Medication`."
  createMedication(input: CreateMedicationInput!): CreateMedicationPayload

  "Deactivates a single `Medication` using its globally unique ID."
  deactivateMedication(
    input: DeactivateMedicationInput!
  ): DeactivateMedicationPayload

  "Creates a single `EmployeeRequest`."
  createEmployeeRequest(
    input: CreateEmployeeRequestInput!
  ): CreateEmployeeRequestPayload

  "Deactivates a single `Employee` using its globally unique ID."
  deactivateEmployee(input: DeactivateEmployeeInput!): DeactivateEmployeePayload

  "Creates a single `Service`."
  createService(input: CreateServiceInput!): CreateServicePayload

  "Deactivates a single `Service` using its globally unique ID."
  deactivateService(input: DeactivateServiceInput!): DeactivateServicePayload

  "Updates a single `Service` using its globally unique ID."
  updateService(input: UpdateServiceInput!): UpdateServicePayload

  "Creates a single `ServiceGroup`."
  createServiceGroup(input: CreateServiceGroupInput!): CreateServiceGroupPayload

  "Deactivates a single `ServiceGroup` using its globally unique ID."
  deactivateServiceGroup(
    input: DeactivateServiceGroupInput!
  ): DeactivateServiceGroupPayload

  "Add `Service` to `ServiceGroup`."
  addServiceToGroup(input: AddServiceToGroupInput!): AddServiceToGroupPayload

  "Delete `Service` from `ServiceGroup`."
  deleteServiceFromGroup(
    input: DeleteServiceFromGroupInput!
  ): DeleteServiceFromGroupPayload

  "Updates a single `ServiceGroup` using its globally unique ID."
  updateServiceGroup(input: UpdateServiceGroupInput!): UpdateServiceGroupPayload

  "Creates a single `ProgramService`."
  createProgramService(
    input: CreateProgramServiceInput!
  ): CreateProgramServicePayload

  "Updates a single `ProgramService` using its globally unique ID and a patch."
  updateProgramService(
    input: UpdateProgramServiceInput!
  ): UpdateProgramServicePayload

  "Deactivates a single `ProgramService` using its globally unique ID."
  deactivateProgramService(
    input: DeactivateProgramServiceInput!
  ): DeactivateProgramServicePayload

  "Updates fields of `GlobalParameters`."
  updateGlobalParameters(
    input: UpdateGlobalParametersInput!
  ): UpdateGlobalParametersPayload
}

"""
The query root of Subscription.
"""
type Subscription {
  "Reads and enables pagination through a set of `LegalEntityMergeJob`."
  legalEntityMergeJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityMergeJobFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityMergeJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityMergeJobConnection!
}
