# import * from "scalars.graphql"
# import * from "directives.graphql"
# import * from "relay.graphql"

# import * from "contracts.graphql"
# import * from "contractRequests.graphql"
# import * from "declarations.graphql"
# import * from "dictionaries.graphql"
# import * from "legalEntities.graphql"
# import * from "legalEntityMergeJobs.graphql"
# import * from "persons.graphql"
# import * from "settlements.graphql"
"""
The query root of e-Health GraphQL interface.
"""
type Query {
  "Reads and enables pagination through a set of `Contract`."
  contracts(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ContractFilter
    "The method to use when ordering collection items."
    orderBy: ContractOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ContractConnection!

  "Reads a single `Contract` using its globally unique ID."
  contract(id: ID!): Contract

  "Reads and enables pagination through a set of `ContractRequest`."
  contractRequests(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ContractRequestFilter
    "The method to use when ordering collection items."
    orderBy: ContractRequestOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ContractRequestConnection!

  "Reads a single `ContractRequest` using its globally unique ID."
  contractRequest(id: ID!): ContractRequest

  "Reads and enables pagination through a set of `Declaration`."
  declarations(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DeclarationFilter
    "The method to use when ordering collection items."
    orderBy: DeclarationOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DeclarationConnection!

  "Reads a single `Declaration` using its globally unique ID."
  declaration(id: ID!): Declaration

  "Reads a set of `Dictionary`."
  dictionaries(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DictionaryFilter
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DictionaryConnection!

  "Reads a single `Dictionary` using its name."
  dictionary(name: String!): Dictionary

  "Reads and enables pagination through a set of `Employee`."
  employees(
    "A condition to be used in determining which values should be returned by the collection."
    filter: EmployeeFilter
    "The method to use when ordering collection items."
    orderBy: EmployeeOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): EmployeeConnection!

  "Reads a single `Employee` using its globally unique ID."
  employee(id: ID!): Employee

  "Reads and enables pagination through a set of `LegalEntity`."
  legalEntities(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityConnection!

  "Reads a single `LegalEntity` using its globally unique ID."
  legalEntity(id: ID!): LegalEntity

  "Reads and enables pagination through a set of `LegalEntityMergeJob`."
  legalEntityMergeJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityMergeJobFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityMergeJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityMergeJobConnection!

  "Reads a single `LegalEntityMergeJob` using its globally unique ID."
  legalEntityMergeJob(id: ID!): LegalEntityMergeJob

  "Reads and enables pagination through a set of `Person`."
  persons(
    "A condition to be used in determining which values should be returned by the collection."
    filter: PersonFilter
    "The method to use when ordering collection items."
    orderBy: PersonOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): PersonConnection!

  "Reads a single `Person` using its globally unique ID."
  person(id: ID!): Person

  "the filter must be used to get list of settlements"
  settlements(
    "A condition to be used in determining which values should be returned by the collection."
    filter: SettlementFilter
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): SettlementConnection!
}

"""
The root query for implementing GraphQL mutations.
"""
type Mutation {
  """
  Autogenerated input type of terminateContract.
  """
  terminateContract(input: TerminateContractInput!): TerminateContractPayload
  """
  Autogenerated input type of prolongateContract.
  """
  prolongateContract(input: ProlongateContractInput!): ProlongateContractPayload
  """
  Autogenerated input type of updateContractRequest.
  """
  updateContractRequest(
    input: UpdateContractRequestInput!
  ): UpdateContractRequestPayload

  """
  Autogenerated input type of assignContractRequest.
  """
  assignContractRequest(
    input: AssignContractRequestInput!
  ): AssignContractRequestPayload

  """
  Autogenerated input type of declineContractRequest.
  """
  declineContractRequest(
    input: DeclineContractRequestInput!
  ): DeclineContractRequestPayload

  """
  Autogenerated input type of approveContractRequest.
  """
  approveContractRequest(
    input: ApproveContractRequestInput!
  ): ApproveContractRequestPayload

  """
  Autogenerated input type of signContractRequest.
  """
  signContractRequest(
    input: SignContractRequestInput!
  ): SignContractRequestPayload

  """
  Autogenerated input type of terminateDeclaration.
  """
  terminateDeclaration(
    input: TerminateDeclarationInput!
  ): TerminateDeclarationPayload

  """
  Autogenerated input type of approveDeclaration.
  """
  approveDeclaration(input: ApproveDeclarationInput!): ApproveDeclarationPayload

  """
  Autogenerated input type of rejectDeclaration.
  """
  rejectDeclaration(input: RejectDeclarationInput!): RejectDeclarationPayload

  """
  Autogenerated input type of updateDictionary.
  """
  updateDictionary(input: UpdateDictionaryInput!): UpdateDictionaryPayload

  """
  Autogenerated input type of nhsVerifyLegalEntity.
  """
  nhsVerifyLegalEntity(
    input: NhsVerifyLegalEntityInput!
  ): NhsVerifyLegalEntityPayload

  """
  Autogenerated input type of deactivateLegalEntity.
  """
  deactivateLegalEntity(
    input: DeactivateLegalEntityInput!
  ): DeactivateLegalEntityPayload

  """
  Autogenerated input type of mergeLegalEntities.
  """
  mergeLegalEntities(input: MergeLegalEntitiesInput!): MergeLegalEntitiesPayload

  """
  Autogenerated input type of resetPersonAuthenticationMethod.
  """
  resetPersonAuthenticationMethod(
    input: ResetPersonAuthenticationMethodInput!
  ): ResetPersonAuthenticationMethodPayload
}

"""
The query root of Subscription.
"""
type Subscription {
  "Reads and enables pagination through a set of `LegalEntityMergeJob`."
  legalEntityMergeJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityMergeJobFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityMergeJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityMergeJobConnection!
}
