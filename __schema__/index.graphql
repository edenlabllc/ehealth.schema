# import * from "scalars.graphql"
# import * from "directives.graphql"
# import * from "relay.graphql"

# import * from "contracts.graphql"
# import * from "contractRequests.graphql"
# import * from "declarations.graphql"
# import * from "dictionaries.graphql"
# import * from "legalEntities.graphql"
# import * from "legalEntityMergeJobs.graphql"
# import * from "persons.graphql"
# import * from "settlements.graphql"
"""
The query root of e-Health GraphQL interface.
"""
type Query {
  "the filter must be used to get list of contracts"
  contracts(
    filter: ContractFilter
    orderBy: ContractOrderBy
    after: String
    before: String
    first: Int
    last: Int
  ): ContractConnection!

  "Reads a single `contract` using its globally unique ID."
  contract(id: ID!): Contract

  "the filter must be used to get list of contract request"
  contractRequests(
    "A condition to be used in determining which values should be returned by the collection."
    filter: ContractRequestFilter
    "The method to use when ordering collection items."
    orderBy: ContractRequestOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): ContractRequestConnection!

  "Reads a single `contractRequest` using its globally unique ID."
  contractRequest(id: ID!): ContractRequest

  "the filter must be used to get list of declarations which belong to the patient knowing patient ID"
  declarations(
    "A condition to be used in determining which values should be returned by the collection."
    filter: DeclarationFilter
    "The method to use when ordering collection items."
    orderBy: DeclarationOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): DeclarationConnection!

  "Reads a single `Declaration` using its globally unique ID."
  declaration(id: ID!): Declaration

  "the filter must be used to get exactly one declaration knowing its' number"
  declarationByNumber(number: String!): Declaration

  "Filter for a dictionary."
  dictionaries(filter: DictionaryFilter): [Dictionary]

  "the filter must be used to get exactly one declaration knowing its' name"
  dictionary(name: String!): Dictionary

  "Reads a single `LegalEntity` using its globally unique ID."
  legalEntity(id: ID!): LegalEntity

  "the filter must be used to get exactly one legal entity knowing its' EDRPOU"
  legalEntityByEdrpou(edrpou: String!): LegalEntity

  "the filter must be used to get list of legal entities"
  legalEntities(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityOrderBy
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityConnection!

  "Reads and enables pagination through a set of `legalEntityMergeJobs`."
  legalEntityMergeJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityMergeJobFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityMergeJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityMergeJobConnection!

  "Reads a single `Person` using its globally unique ID."
  person(id: ID!): Person

  "Reads and enables pagination through a set of `Person`."
  persons(
    "A condition to be used in determining which values should be returned by the collection."
    filter: PersonFilter
    "The method to use when ordering collection items."
    orderBy: PersonOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): PersonConnection!

  "the filter must be used to get list of settlements"
  settlements(
    "A condition to be used in determining which values should be returned by the collection."
    filter: SettlementFilter
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): SettlementConnection!
}

"""
The root query for implementing GraphQL mutations.
"""
type Mutation {
  """
  Autogenerated input type of terminateContract.
  """
  terminateContract(input: TerminateContractInput!): TerminateContractPayload
  """
  Autogenerated input type of prolongateContract.
  """
  prolongateContract(input: ProlongateContractInput!): ProlongateContractPayload
  """
  Autogenerated input type of updateContractRequest.
  """
  updateContractRequest(
    input: UpdateContractRequestInput!
  ): UpdateContractRequestPayload

  """
  Autogenerated input type of assignContractRequest.
  """
  assignContractRequest(
    input: AssignContractRequestInput!
  ): AssignContractRequestPayload

  """
  Autogenerated input type of declineContractRequest.
  """
  declineContractRequest(
    input: DeclineContractRequestInput!
  ): DeclineContractRequestPayload

  """
  Autogenerated input type of approveContractRequest.
  """
  approveContractRequest(
    input: ApproveContractRequestInput!
  ): ApproveContractRequestPayload

  """
  Autogenerated input type of signContractRequest.
  """
  signContractRequest(
    input: SignContractRequestInput!
  ): SignContractRequestPayload

  """
  Autogenerated input type of terminateDeclaration.
  """
  terminateDeclaration(
    input: TerminateDeclarationInput!
  ): TerminateDeclarationPayload

  """
  Autogenerated input type of approveDeclaration.
  """
  approveDeclaration(input: ApproveDeclarationInput!): ApproveDeclarationPayload

  """
  Autogenerated input type of rejectDeclaration.
  """
  rejectDeclaration(input: RejectDeclarationInput!): RejectDeclarationPayload

  """
  Autogenerated input type of updateDictionary.
  """
  updateDictionary(input: UpdateDictionaryInput!): UpdateDictionaryPayload

  """
  Autogenerated input type of nhsVerifyLegalEntity.
  """
  nhsVerifyLegalEntity(
    input: NhsVerifyLegalEntityInput!
  ): NhsVerifyLegalEntityPayload

  """
  Autogenerated input type of deactivateLegalEntity.
  """
  deactivateLegalEntity(
    input: DeactivateLegalEntityInput!
  ): DeactivateLegalEntityPayload

  """
  Autogenerated input type of mergeLegalEntities.
  """
  mergeLegalEntities(input: MergeLegalEntitiesInput!): MergeLegalEntitiesPayload

  """
  Autogenerated input type of resetPersonAuthenticationMethod.
  """
  resetPersonAuthenticationMethod(
    input: ResetPersonAuthenticationMethodInput!
  ): ResetPersonAuthenticationMethodPayload
}

"""
The query root of Subscription.
"""
type Subscription {
  "Reads and enables pagination through a set of `legalEntityMergeJobs`."
  legalEntityMergeJobs(
    "A condition to be used in determining which values should be returned by the collection."
    filter: LegalEntityMergeJobFilter
    "The method to use when ordering collection items."
    orderBy: LegalEntityMergeJobOrderBy
    "Read all values in the set after (below) this cursor."
    after: String
    "Read all values in the set before (above) this cursor."
    before: String
    "Only read the first _n_ values of the set."
    first: Int
    "Only read the last _n_ values of the set."
    last: Int
  ): LegalEntityMergeJobConnection!
}
