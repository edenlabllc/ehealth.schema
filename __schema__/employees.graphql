"""
Fields to filter employee in the system.
"""
input EmployeeFilter {
  "Type of Employee."
  employeeType: [String]
  "Employee status. The value should be present in the `EMPLOYEE_STATUS` dictionary."
  status: String
  "Whether Employee is active or not?"
  isActive: Boolean
  "Filter by employee's legal entity."
  legalEntity: LegalEntityFilter
  "Filter by employee's party."
  party: PartyFilter
  "Filter by division"
  division: DivisionFilter
  "Filter by position"
  position: String
  "First day on the job."
  startDate: Date
}

"""
Methods to use when ordering `Employee`.
"""
enum EmployeeOrderBy {
  "Sort by employee_type in ascending order."
  EMPLOYEE_TYPE_ASC
  "Sort by employee_type in descending order."
  EMPLOYEE_TYPE_DESC
  "Sort by full name in ascending order."
  FULL_NAME_ASC
  "Sort by full name in descending order."
  FULL_NAME_DESC
  "Sort by inserted_at in ascending order."
  INSERTED_AT_ASC
  "Sort by inserted_at in descending order."
  INSERTED_AT_DESC
  "Sort by status in ascending order."
  STATUS_ASC
  "Sort by status in descending order."
  STATUS_DESC
}

"""
A connection to a list of `Employee` values.
"""
type EmployeeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of nodes."
  nodes: [Employee]
  "A list of edges."
  edges: [EmployeeEdge]
}

"""
An edge in a connection of `Employee`.
"""
type EmployeeEdge {
  "The item at the end of the edge."
  node: Employee!
  "A cursor for use in pagination."
  cursor: String!
}

"""
Input fields to `DeactivateEmployee`. User must have scope `employee:deactivate`
"""
input DeactivateEmployeeInput {
  "Globally unique ID of the `Employee` which should be deactivated."
  id: ID!
}

"""
Employee details contain information about Party (personal data) and Employee (professional data)
"""
type Employee implements Node {
  "The ID of an object"
  id: ID!
  "Primary key identifier from the database"
  databaseId: UUID!
  "Employee position."
  position: String! @fake(locale: "uk", method: "name.title")
  "First day on the job."
  startDate: Date!
  "Last day on the job"
  endDate: Date
  "Whether Employee is active or not?"
  isActive: Boolean!
  "Employee type, is choosen from dictionary. The value should be present in the `EMPLOYEE_TYPE` dictionary."
  employeeType: String!
  "Employee status, is choosen from dictionary. The value should be present in the `EMPLOYEE_STATUS` dictionary."
  status: String!
  "Professional information of employee."
  additionalInfo: EmployeeAdditionalInfo
  "Personal information of employee."
  party: Party!
  "Division in which employee works."
  division: Division
  "Legal entity in which employee works."
  legalEntity: LegalEntity!
}

"""
Professional information of employee.
"""
type EmployeeAdditionalInfo {
  "Employee's specialities"
  specialities: [Speciality]
  "Employee's educations"
  educations: [Education]
  "Employee's qualification"
  qualifications: [Qualification]
  "Employee's science degree"
  scienceDegree: [ScienceDegree]
}

"""
Information about doctor's speciality.
"""
type Speciality {
  "Speciality title"
  speciality: String! @fake(locale: "uk", method: "name.jobTitle")
  "In case this speciality is a speciality for job position, speciality Officio should be true."
  specialityOfficio: Boolean!
  "Qualification level."
  level: String!
  "Qualification type."
  qualificationType: String!
  "Institution name where qualification was obtained."
  attestationName: String!
  "The date when qualification was obtained."
  attestationDate: Date!
  "Qualification certificate expiration date."
  validToDate: Date
  "Number of qualification certificate."
  certificateNumber: String! @fake(randexp: "^[0-9]{10}$")
}

"""
Information about employee's education
"""
type Education {
  "The city where diploma was obtained"
  city: String!
  "The country of education"
  country: String!
  "Education degree"
  degree: String!
  "The diploma number"
  diplomaNumber: String!
  "Oficial name of institution"
  institutionName: String!
  "The date when diploma was obtained"
  issuedDate: Date
  "Speciality that in mentioned in diploma"
  speciality: String!
}

"""
Information about employee's qualification
"""
type Qualification {
  "Number of qualification certificate."
  certificateNumber: String
  "Official name of institution"
  institutionName: String!
  "The date when qualification was obtained."
  issuedDate: Date
  "Speciality that in mentioned in qualification certificate"
  speciality: String!
  "Type qualification certificate"
  type: String!
}

"""
Information about employee's science degree
"""
type ScienceDegree {
  "The city where science degree was obtained"
  city: String!
  "The country where science degree was obtained"
  country: String!
  "Science degree"
  degree: String!
  "Name science degree diploma"
  diplomaNumber: String!
  "Official name of institution"
  institutionName: String!
  "The date when science degree was obtained."
  issuedDate: Date
  "Speciality that in mentioned in science degree certificate"
  speciality: String!
}

"""
Autogenerated return type of `DeactivateEmployee`
"""
type DeactivateEmployeePayload {
  "Payload for Employee"
  employee: Employee
}
